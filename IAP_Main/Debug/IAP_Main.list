
IAP_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b40  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c8  080052c8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080052d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000548  20000094  08005364  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08005364  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f605  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b39  00000000  00000000  0002f6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00032200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00032d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001816f  00000000  00000000  00033718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8c4  00000000  00000000  0004b887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f46  00000000  00000000  0005b14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002578  00000000  00000000  000f20e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bd4 	.word	0x08004bd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	08004bd4 	.word	0x08004bd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <Int2Str+0x98>)
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	e035      	b.n	80006a8 <Int2Str+0x88>
  {
    p_str[pos++] = (intnum / divider) + 48;
 800063c:	6939      	ldr	r1, [r7, #16]
 800063e:	6838      	ldr	r0, [r7, #0]
 8000640:	f7ff fd62 	bl	8000108 <__udivsi3>
 8000644:	0003      	movs	r3, r0
 8000646:	b2da      	uxtb	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	1c59      	adds	r1, r3, #1
 800064c:	60f9      	str	r1, [r7, #12]
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	18cb      	adds	r3, r1, r3
 8000652:	3230      	adds	r2, #48	; 0x30
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	6939      	ldr	r1, [r7, #16]
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff fdd9 	bl	8000214 <__aeabi_uidivmod>
 8000662:	000b      	movs	r3, r1
 8000664:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	210a      	movs	r1, #10
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff fd4c 	bl	8000108 <__udivsi3>
 8000670:	0003      	movs	r3, r0
 8000672:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3b01      	subs	r3, #1
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	18d3      	adds	r3, r2, r3
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	3b30      	subs	r3, #48	; 0x30
 8000680:	425a      	negs	r2, r3
 8000682:	4153      	adcs	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	4251      	negs	r1, r2
 800068a:	414a      	adcs	r2, r1
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	4013      	ands	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <Int2Str+0x7c>
    {
      pos = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e002      	b.n	80006a2 <Int2Str+0x82>
    }
    else
    {
      status++;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	3301      	adds	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3301      	adds	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2b09      	cmp	r3, #9
 80006ac:	d9c6      	bls.n	800063c <Int2Str+0x1c>
    }
  }
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b006      	add	sp, #24
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	3b9aca00 	.word	0x3b9aca00

080006bc <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b30      	cmp	r3, #48	; 0x30
 80006d8:	d000      	beq.n	80006dc <Str2Int+0x20>
 80006da:	e0d7      	b.n	800088c <Str2Int+0x1d0>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b78      	cmp	r3, #120	; 0x78
 80006e4:	d005      	beq.n	80006f2 <Str2Int+0x36>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b58      	cmp	r3, #88	; 0x58
 80006ee:	d000      	beq.n	80006f2 <Str2Int+0x36>
 80006f0:	e0cc      	b.n	800088c <Str2Int+0x1d0>
  {
    i = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80006f6:	e057      	b.n	80007a8 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b40      	cmp	r3, #64	; 0x40
 8000702:	d905      	bls.n	8000710 <Str2Int+0x54>
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b46      	cmp	r3, #70	; 0x46
 800070e:	d917      	bls.n	8000740 <Str2Int+0x84>
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	18d3      	adds	r3, r2, r3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b60      	cmp	r3, #96	; 0x60
 800071a:	d905      	bls.n	8000728 <Str2Int+0x6c>
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	18d3      	adds	r3, r2, r3
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b66      	cmp	r3, #102	; 0x66
 8000726:	d90b      	bls.n	8000740 <Str2Int+0x84>
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	18d3      	adds	r3, r2, r3
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b2f      	cmp	r3, #47	; 0x2f
 8000732:	d936      	bls.n	80007a2 <Str2Int+0xe6>
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b39      	cmp	r3, #57	; 0x39
 800073e:	d830      	bhi.n	80007a2 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	011a      	lsls	r2, r3, #4
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	18cb      	adds	r3, r1, r3
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b2f      	cmp	r3, #47	; 0x2f
 800074e:	d90b      	bls.n	8000768 <Str2Int+0xac>
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	18cb      	adds	r3, r1, r3
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b39      	cmp	r3, #57	; 0x39
 800075a:	d805      	bhi.n	8000768 <Str2Int+0xac>
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	18cb      	adds	r3, r1, r3
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	3b30      	subs	r3, #48	; 0x30
 8000766:	e016      	b.n	8000796 <Str2Int+0xda>
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	18cb      	adds	r3, r1, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b40      	cmp	r3, #64	; 0x40
 8000772:	d90b      	bls.n	800078c <Str2Int+0xd0>
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	18cb      	adds	r3, r1, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b46      	cmp	r3, #70	; 0x46
 800077e:	d805      	bhi.n	800078c <Str2Int+0xd0>
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	18cb      	adds	r3, r1, r3
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3b37      	subs	r3, #55	; 0x37
 800078a:	e004      	b.n	8000796 <Str2Int+0xda>
 800078c:	6879      	ldr	r1, [r7, #4]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	18cb      	adds	r3, r1, r3
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3b57      	subs	r3, #87	; 0x57
 8000796:	189b      	adds	r3, r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e002      	b.n	80007a8 <Str2Int+0xec>
        res = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
        break;
 80007a6:	e008      	b.n	80007ba <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	2b0a      	cmp	r3, #10
 80007ac:	d805      	bhi.n	80007ba <Str2Int+0xfe>
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	18d3      	adds	r3, r2, r3
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d19e      	bne.n	80006f8 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	18d3      	adds	r3, r2, r3
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d000      	beq.n	80007c8 <Str2Int+0x10c>
 80007c6:	e067      	b.n	8000898 <Str2Int+0x1dc>
    {
      *p_intnum = val;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	601a      	str	r2, [r3, #0]
      res = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 80007d2:	e061      	b.n	8000898 <Str2Int+0x1dc>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d105      	bne.n	80007ec <Str2Int+0x130>
      {
        *p_intnum = val;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	e04c      	b.n	8000886 <Str2Int+0x1ca>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	18d3      	adds	r3, r2, r3
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b6b      	cmp	r3, #107	; 0x6b
 80007f6:	d005      	beq.n	8000804 <Str2Int+0x148>
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	18d3      	adds	r3, r2, r3
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b4b      	cmp	r3, #75	; 0x4b
 8000802:	d10b      	bne.n	800081c <Str2Int+0x160>
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d008      	beq.n	800081c <Str2Int+0x160>
      {
        val = val << 10;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	029b      	lsls	r3, r3, #10
 800080e:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	601a      	str	r2, [r3, #0]
        res = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	e034      	b.n	8000886 <Str2Int+0x1ca>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b6d      	cmp	r3, #109	; 0x6d
 8000826:	d005      	beq.n	8000834 <Str2Int+0x178>
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b4d      	cmp	r3, #77	; 0x4d
 8000832:	d10b      	bne.n	800084c <Str2Int+0x190>
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d008      	beq.n	800084c <Str2Int+0x190>
      {
        val = val << 20;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	051b      	lsls	r3, r3, #20
 800083e:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	601a      	str	r2, [r3, #0]
        res = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	e01c      	b.n	8000886 <Str2Int+0x1ca>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b2f      	cmp	r3, #47	; 0x2f
 8000856:	d913      	bls.n	8000880 <Str2Int+0x1c4>
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	18d3      	adds	r3, r2, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b39      	cmp	r3, #57	; 0x39
 8000862:	d80d      	bhi.n	8000880 <Str2Int+0x1c4>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	0013      	movs	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	189b      	adds	r3, r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	0019      	movs	r1, r3
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	18cb      	adds	r3, r1, r3
 800087a:	3b30      	subs	r3, #48	; 0x30
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e002      	b.n	8000886 <Str2Int+0x1ca>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
        break;
 8000884:	e008      	b.n	8000898 <Str2Int+0x1dc>
      }
      i++;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2b0a      	cmp	r3, #10
 8000890:	d802      	bhi.n	8000898 <Str2Int+0x1dc>
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d19d      	bne.n	80007d4 <Str2Int+0x118>
    }
  }

  return res;
 8000898:	693b      	ldr	r3, [r7, #16]
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b006      	add	sp, #24
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80008ac:	230e      	movs	r3, #14
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	801a      	strh	r2, [r3, #0]

  while (p_string[length] != '\0')
 80008b4:	e005      	b.n	80008c2 <Serial_PutString+0x1e>
  {
    length++;
 80008b6:	210e      	movs	r1, #14
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	881a      	ldrh	r2, [r3, #0]
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	3201      	adds	r2, #1
 80008c0:	801a      	strh	r2, [r3, #0]
  while (p_string[length] != '\0')
 80008c2:	210e      	movs	r1, #14
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	18d3      	adds	r3, r2, r3
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f1      	bne.n	80008b6 <Serial_PutString+0x12>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	881a      	ldrh	r2, [r3, #0]
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <Serial_PutString+0x44>)
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	f003 fa2e 	bl	8003d3c <HAL_UART_Transmit>
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b004      	add	sp, #16
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000d4 	.word	0x200000d4

080008ec <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	0002      	movs	r2, r0
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Serial_PutByte+0x34>)
 80008fa:	2288      	movs	r2, #136	; 0x88
 80008fc:	589b      	ldr	r3, [r3, r2]
 80008fe:	2ba0      	cmp	r3, #160	; 0xa0
 8000900:	d103      	bne.n	800090a <Serial_PutByte+0x1e>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <Serial_PutByte+0x34>)
 8000904:	2288      	movs	r2, #136	; 0x88
 8000906:	2120      	movs	r1, #32
 8000908:	5099      	str	r1, [r3, r2]
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 800090a:	1df9      	adds	r1, r7, #7
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <Serial_PutByte+0x34>)
 800090e:	2364      	movs	r3, #100	; 0x64
 8000910:	2201      	movs	r2, #1
 8000912:	f003 fa13 	bl	8003d3c <HAL_UART_Transmit>
 8000916:	0003      	movs	r3, r0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000d4 	.word	0x200000d4

08000924 <FLASH_If_Init>:
  * @retval None
  */

#define FLASH_DOUBLEWORD_SIZE 8
void FLASH_If_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 8000928:	f001 fd40 	bl	80023ac <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <FLASH_If_Init+0x18>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0212      	lsls	r2, r2, #8
 8000932:	611a      	str	r2, [r3, #16]

}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40022000 	.word	0x40022000

08000940 <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  FLASH_EraseInitTypeDef desc;
  uint32_t result = FLASHIF_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t pageerror;


  /* Unlock the Flash to enable the flash control register access *************/
   FLASH_If_Init();
 800094c:	f7ff ffea 	bl	8000924 <FLASH_If_Init>

  desc.Page = (start - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	22f8      	movs	r2, #248	; 0xf8
 8000954:	0612      	lsls	r2, r2, #24
 8000956:	4694      	mov	ip, r2
 8000958:	4463      	add	r3, ip
 800095a:	0ada      	lsrs	r2, r3, #11
 800095c:	210c      	movs	r1, #12
 800095e:	187b      	adds	r3, r7, r1
 8000960:	609a      	str	r2, [r3, #8]
  desc.TypeErase = FLASH_TYPEERASE_PAGES;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2202      	movs	r2, #2
 8000966:	601a      	str	r2, [r3, #0]
  desc.Banks = FLASH_BANK_1;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2204      	movs	r2, #4
 800096c:	605a      	str	r2, [r3, #4]

/* NOTE: Following implementation expects the IAP code address to be < Application address */
  if (start < FLASH_END_ADDRESS )
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <FLASH_If_Erase+0x6c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d811      	bhi.n	800099a <FLASH_If_Erase+0x5a>
  {
    desc.NbPages = (FLASH_END_ADDRESS - start) / FLASH_PAGE_SIZE; // 59 pages to be erased from the user application address till the end of the RAM
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <FLASH_If_Erase+0x70>)
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	0ada      	lsrs	r2, r3, #11
 800097e:	187b      	adds	r3, r7, r1
 8000980:	60da      	str	r2, [r3, #12]
    if (HAL_FLASHEx_Erase(&desc, &pageerror) != HAL_OK)
 8000982:	2308      	movs	r3, #8
 8000984:	18fa      	adds	r2, r7, r3
 8000986:	187b      	adds	r3, r7, r1
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fdf4 	bl	8002578 <HAL_FLASHEx_Erase>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d004      	beq.n	800099e <FLASH_If_Erase+0x5e>
    {
      result = FLASHIF_ERASEKO;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	e001      	b.n	800099e <FLASH_If_Erase+0x5e>
    }
  }
  else
	  result = FLASHIF_ERASEKO;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]

  HAL_FLASH_Lock();
 800099e:	f001 fd29 	bl	80023f4 <HAL_FLASH_Lock>

  return result;
 80009a2:	69fb      	ldr	r3, [r7, #28]
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b008      	add	sp, #32
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	0801ffff 	.word	0x0801ffff
 80009b0:	08020000 	.word	0x08020000

080009b4 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t status = FLASHIF_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]

  HAL_FLASH_Unlock();
 80009c8:	f001 fcf0 	bl	80023ac <HAL_FLASH_Unlock>


  for (i = 0; (i < length/2) && (destination <= (USER_FLASH_END_ADDRESS-8)); i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	e025      	b.n	8000a1e <FLASH_If_Write+0x6a>
   {
     /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
        be done by word */
     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, destination, *((uint64_t *)(p_source+2*i))) == HAL_OK)
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	18d3      	adds	r3, r2, r3
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	68f9      	ldr	r1, [r7, #12]
 80009e0:	2001      	movs	r0, #1
 80009e2:	f001 fc95 	bl	8002310 <HAL_FLASH_Program>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d113      	bne.n	8000a12 <FLASH_If_Write+0x5e>
     {
      /* Check the written value */
       if (*(uint64_t*)destination != *(uint64_t *)(p_source+2*i))
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	6859      	ldr	r1, [r3, #4]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	18d3      	adds	r3, r2, r3
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4290      	cmp	r0, r2
 80009fe:	d101      	bne.n	8000a04 <FLASH_If_Write+0x50>
 8000a00:	4299      	cmp	r1, r3
 8000a02:	d002      	beq.n	8000a0a <FLASH_If_Write+0x56>
       {
         /* Flash content doesn't match SRAM content */
         status = FLASHIF_WRITINGCTRL_ERROR;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
         break;
 8000a08:	e012      	b.n	8000a30 <FLASH_If_Write+0x7c>
       }
       /* Increment FLASH destination address */
       destination += 8;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3308      	adds	r3, #8
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	e002      	b.n	8000a18 <FLASH_If_Write+0x64>
     }
     else
     {
       /* Error occurred while writing data in Flash memory */
       status = FLASHIF_WRITING_ERROR;
 8000a12:	2303      	movs	r3, #3
 8000a14:	617b      	str	r3, [r7, #20]
       break;
 8000a16:	e00b      	b.n	8000a30 <FLASH_If_Write+0x7c>
  for (i = 0; (i < length/2) && (destination <= (USER_FLASH_END_ADDRESS-8)); i++)
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d203      	bcs.n	8000a30 <FLASH_If_Write+0x7c>
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <FLASH_If_Write+0x8c>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d9d0      	bls.n	80009d2 <FLASH_If_Write+0x1e>
     }
   }
  HAL_FLASH_Lock();
 8000a30:	f001 fce0 	bl	80023f4 <HAL_FLASH_Lock>

  return status;
 8000a34:	697b      	ldr	r3, [r7, #20]
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b006      	add	sp, #24
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	0801fff8 	.word	0x0801fff8

08000a44 <FLASH_If_GetWriteProtectionStatus>:
  * @retval If a sector in application area is write-protected returned value is a combination
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_If_GetWriteProtectionStatus(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b092      	sub	sp, #72	; 0x48
 8000a48:	af00      	add	r7, sp, #0
  FLASH_OBProgramInitTypeDef config;
  uint32_t wrp1_status = 0, wrp2_status = 0, wrp_area_status = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8000a4e:	2300      	movs	r3, #0
 8000a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a52:	2300      	movs	r3, #0
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t protected = FLASHIF_PROTECTION_NONE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the current configuration */
  config.WRPArea=OB_WRPAREA_ZONE_A;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	605a      	str	r2, [r3, #4]
  HAL_FLASHEx_OBGetConfig(&config);
 8000a60:	003b      	movs	r3, r7
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 feae 	bl	80027c4 <HAL_FLASHEx_OBGetConfig>

  wrp_area_status = config.WRPArea;
 8000a68:	003b      	movs	r3, r7
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  wrp1_status     =config.WRPStartOffset;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  wrp2_status     =config.WRPEndOffset;
 8000a74:	003b      	movs	r3, r7
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Final evaluation of status */
  if ((wrp_area_status != 0) && (wrp1_status < wrp2_status))
 8000a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d005      	beq.n	8000a8c <FLASH_If_GetWriteProtectionStatus+0x48>
 8000a80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d201      	bcs.n	8000a8c <FLASH_If_GetWriteProtectionStatus+0x48>
  {
    protected = FLASHIF_PROTECTION_WRPENABLED;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return protected;
 8000a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b012      	add	sp, #72	; 0x48
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <FLASH_If_WriteProtectionConfig>:
  * @brief  Configure the write protection status of user flash area.
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */
uint32_t FLASH_If_WriteProtectionConfig(uint32_t protectionstate)
{
 8000a96:	b5b0      	push	{r4, r5, r7, lr}
 8000a98:	b0a0      	sub	sp, #128	; 0x80
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  FLASH_OBProgramInitTypeDef config_new, config_old;
  HAL_StatusTypeDef result;

  	HAL_FLASH_Unlock();
 8000a9e:	f001 fc85 	bl	80023ac <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8000aa2:	f001 fcc3 	bl	800242c <HAL_FLASH_OB_Unlock>

	 config_old.WRPArea=OB_WRPAREA_ZONE_A;
 8000aa6:	240c      	movs	r4, #12
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2201      	movs	r2, #1
 8000aac:	605a      	str	r2, [r3, #4]
  	 HAL_FLASHEx_OBGetConfig( &config_old );
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 fe87 	bl	80027c4 <HAL_FLASHEx_OBGetConfig>

  if(protectionstate == FLASHIF_WRP_ENABLE)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d111      	bne.n	8000ae0 <FLASH_If_WriteProtectionConfig+0x4a>
  {
	  /* We want to modify only the Write protection */
	  config_new.OptionType = OPTIONBYTE_WRP;
 8000abc:	2144      	movs	r1, #68	; 0x44
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]

	  /* No read protection, keep BOR and reset settings */
	  // config_new.RDPLevel = OB_RDP_LEVEL_0;
	   config_new.USERConfig = config_old.USERConfig;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	699a      	ldr	r2, [r3, #24]
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	619a      	str	r2, [r3, #24]

	   //as the G0 here only contains one bank hence we just need to modify the WRP area 1/2(as it contains only one bank hence we can
	   //protect the areas from the application start address till the flash end address) with the
	   config_new.WRPArea=OB_WRPAREA_ZONE_A;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2201      	movs	r2, #1
 8000ad0:	605a      	str	r2, [r3, #4]

	   config_new.WRPStartOffset=START_0x08008000;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	609a      	str	r2, [r3, #8]
	   config_new.WRPEndOffset= END_OF_RAM;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	223f      	movs	r2, #63	; 0x3f
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	e011      	b.n	8000b04 <FLASH_If_WriteProtectionConfig+0x6e>
  }
  else
  {
	  /* We want to modify only the Write protection */
	  config_new.OptionType = OPTIONBYTE_WRP;
 8000ae0:	2144      	movs	r1, #68	; 0x44
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]

	  /* No read protection, keep BOR and reset settings */
	   config_new.USERConfig = config_old.USERConfig;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	699a      	ldr	r2, [r3, #24]
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	619a      	str	r2, [r3, #24]
	   config_new.WRPArea=OB_WRPAREA_ZONE_A;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2201      	movs	r2, #1
 8000af6:	605a      	str	r2, [r3, #4]

	   config_new.WRPStartOffset=END_OF_RAM ;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	223f      	movs	r2, #63	; 0x3f
 8000afc:	609a      	str	r2, [r3, #8]
	   config_new.WRPEndOffset=  START_OF_RAM;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  }

    result = HAL_FLASHEx_OBProgram(&config_new);
 8000b04:	257f      	movs	r5, #127	; 0x7f
 8000b06:	197c      	adds	r4, r7, r5
 8000b08:	2344      	movs	r3, #68	; 0x44
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 fda7 	bl	8002660 <HAL_FLASHEx_OBProgram>
 8000b12:	0003      	movs	r3, r0
 8000b14:	7023      	strb	r3, [r4, #0]

  return (result == HAL_OK ? FLASHIF_OK: FLASHIF_PROTECTION_ERRROR);
 8000b16:	197b      	adds	r3, r7, r5
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <FLASH_If_WriteProtectionConfig+0x8c>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <FLASH_If_WriteProtectionConfig+0x8e>
 8000b22:	2304      	movs	r3, #4
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b020      	add	sp, #128	; 0x80
 8000b2a:	bdb0      	pop	{r4, r5, r7, pc}

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f001 f8a5 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b36:	f000 f83d 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f000 f8ff 	bl	8000d3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b3e:	f000 f8af 	bl	8000ca0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000b42:	f000 f87f 	bl	8000c44 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_GPIO_ReadPin(BTN1_GPIO_Port,BTN1_Pin) == GPIO_PIN_SET)
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <main+0x70>)
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0010      	movs	r0, r2
 8000b50:	f002 f99c 	bl	8002e8c <HAL_GPIO_ReadPin>
 8000b54:	0003      	movs	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d104      	bne.n	8000b64 <main+0x38>
  {
	  /* Initialise Flash */
	  FLASH_If_Init();
 8000b5a:	f7ff fee3 	bl	8000924 <FLASH_If_Init>
	  /* Display main menu */
	  Main_Menu ();
 8000b5e:	f000 f9ff 	bl	8000f60 <Main_Menu>
 8000b62:	e01a      	b.n	8000b9a <main+0x6e>
  }
  /* Keep the user application running */
  else
  {
	  /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
	  if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <main+0x74>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <main+0x78>)
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	059b      	lsls	r3, r3, #22
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d112      	bne.n	8000b9a <main+0x6e>
	  {
		  /* Jump to user application */
		  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <main+0x7c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <main+0x80>)
 8000b7a:	601a      	str	r2, [r3, #0]
		  JumpToApplication = (pFunction) JumpAddress;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <main+0x80>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	001a      	movs	r2, r3
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <main+0x84>)
 8000b84:	601a      	str	r2, [r3, #0]
		  /* Initialize user application's Stack Pointer */
		  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <main+0x74>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f383 8808 	msr	MSP, r3
}
 8000b92:	46c0      	nop			; (mov r8, r8)
		  JumpToApplication();
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <main+0x84>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4798      	blx	r3
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <main+0x6e>
 8000b9c:	50000800 	.word	0x50000800
 8000ba0:	08008000 	.word	0x08008000
 8000ba4:	2ffe0000 	.word	0x2ffe0000
 8000ba8:	08008004 	.word	0x08008004
 8000bac:	2000016c 	.word	0x2000016c
 8000bb0:	20000168 	.word	0x20000168

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b093      	sub	sp, #76	; 0x4c
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	2410      	movs	r4, #16
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2338      	movs	r3, #56	; 0x38
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f003 fffd 	bl	8004bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bca:	003b      	movs	r3, r7
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2310      	movs	r3, #16
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f003 fff6 	bl	8004bc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 f98f 	bl	8002f00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2202      	movs	r2, #2
 8000be6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	0052      	lsls	r2, r2, #1
 8000bee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2240      	movs	r2, #64	; 0x40
 8000bfa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	0018      	movs	r0, r3
 8000c06:	f002 f9c7 	bl	8002f98 <HAL_RCC_OscConfig>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c0e:	f000 f8eb 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	003b      	movs	r3, r7
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c24:	003b      	movs	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f002 fccc 	bl	80035cc <HAL_RCC_ClockConfig>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c38:	f000 f8d6 	bl	8000de8 <Error_Handler>
  }
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b013      	add	sp, #76	; 0x4c
 8000c42:	bd90      	pop	{r4, r7, pc}

08000c44 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <MX_CRC_Init+0x54>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x1021;  //CRC polynomial for ymodem
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <MX_CRC_Init+0x58>)
 8000c5e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c62:	2208      	movs	r2, #8
 8000c64:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <MX_CRC_Init+0x50>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 f95b 	bl	8001f3c <HAL_CRC_Init>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d001      	beq.n	8000c8e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000c8a:	f000 f8ad 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000b0 	.word	0x200000b0
 8000c98:	40023000 	.word	0x40023000
 8000c9c:	00001021 	.word	0x00001021

08000ca0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <MX_USART2_UART_Init+0x98>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cac:	22e1      	movs	r2, #225	; 0xe1
 8000cae:	0252      	lsls	r2, r2, #9
 8000cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f002 ffd0 	bl	8003c90 <HAL_UART_Init>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cf4:	f000 f878 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f003 fe5d 	bl	80049bc <HAL_UARTEx_SetTxFifoThreshold>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d06:	f000 f86f 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f003 fe94 	bl	8004a3c <HAL_UARTEx_SetRxFifoThreshold>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d18:	f000 f866 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <MX_USART2_UART_Init+0x94>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f003 fe12 	bl	8004948 <HAL_UARTEx_DisableFifoMode>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d28:	f000 f85e 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	200000d4 	.word	0x200000d4
 8000d38:	40004400 	.word	0x40004400

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	240c      	movs	r4, #12
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	0018      	movs	r0, r3
 8000d48:	2314      	movs	r3, #20
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f003 ff39 	bl	8004bc4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_GPIO_Init+0xa4>)
 8000d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_GPIO_Init+0xa4>)
 8000d58:	2104      	movs	r1, #4
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_GPIO_Init+0xa4>)
 8000d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d62:	2204      	movs	r2, #4
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_GPIO_Init+0xa4>)
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_GPIO_Init+0xa4>)
 8000d70:	2101      	movs	r1, #1
 8000d72:	430a      	orrs	r2, r1
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_GPIO_Init+0xa4>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d82:	23a0      	movs	r3, #160	; 0xa0
 8000d84:	05db      	lsls	r3, r3, #23
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 f89b 	bl	8002ec6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	0192      	lsls	r2, r2, #6
 8000d96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <MX_GPIO_Init+0xa8>)
 8000da8:	0019      	movs	r1, r3
 8000daa:	0010      	movs	r0, r2
 8000dac:	f001 ff0a 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000db0:	0021      	movs	r1, r4
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2220      	movs	r2, #32
 8000db6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2201      	movs	r2, #1
 8000dbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	187a      	adds	r2, r7, r1
 8000dcc:	23a0      	movs	r3, #160	; 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f001 fef6 	bl	8002bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b009      	add	sp, #36	; 0x24
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	50000800 	.word	0x50000800

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2207      	movs	r2, #7
 8000e04:	2100      	movs	r1, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f003 fedc 	bl	8004bc4 <memset>
  uint32_t size = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8000e10:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <SerialDownload+0xc8>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fd46 	bl	80008a4 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8000e18:	250f      	movs	r5, #15
 8000e1a:	197c      	adds	r4, r7, r5
 8000e1c:	003b      	movs	r3, r7
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 fbe0 	bl	80015e4 <Ymodem_Receive>
 8000e24:	0003      	movs	r3, r0
 8000e26:	7023      	strb	r3, [r4, #0]
  if (result == COM_OK)
 8000e28:	197b      	adds	r3, r7, r5
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d11e      	bne.n	8000e6e <SerialDownload+0x7a>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <SerialDownload+0xcc>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fd36 	bl	80008a4 <Serial_PutString>
    Serial_PutString((uint8_t *)aFileName);
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <SerialDownload+0xd0>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff fd32 	bl	80008a4 <Serial_PutString>
    Int2Str(number, size);
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f7ff fbea 	bl	8000620 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <SerialDownload+0xd4>)
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fd28 	bl	80008a4 <Serial_PutString>
    Serial_PutString((uint8_t *)number);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fd24 	bl	80008a4 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <SerialDownload+0xd8>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fd20 	bl	80008a4 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <SerialDownload+0xdc>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff fd1c 	bl	80008a4 <Serial_PutString>
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  }
}
 8000e6c:	e021      	b.n	8000eb2 <SerialDownload+0xbe>
  else if (result == COM_LIMIT)
 8000e6e:	230f      	movs	r3, #15
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b05      	cmp	r3, #5
 8000e76:	d104      	bne.n	8000e82 <SerialDownload+0x8e>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <SerialDownload+0xe0>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff fd12 	bl	80008a4 <Serial_PutString>
}
 8000e80:	e017      	b.n	8000eb2 <SerialDownload+0xbe>
  else if (result == COM_DATA)
 8000e82:	230f      	movs	r3, #15
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d104      	bne.n	8000e96 <SerialDownload+0xa2>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <SerialDownload+0xe4>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff fd08 	bl	80008a4 <Serial_PutString>
}
 8000e94:	e00d      	b.n	8000eb2 <SerialDownload+0xbe>
  else if (result == COM_ABORT)
 8000e96:	230f      	movs	r3, #15
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d104      	bne.n	8000eaa <SerialDownload+0xb6>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <SerialDownload+0xe8>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff fcfe 	bl	80008a4 <Serial_PutString>
}
 8000ea8:	e003      	b.n	8000eb2 <SerialDownload+0xbe>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <SerialDownload+0xec>)
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff fcf9 	bl	80008a4 <Serial_PutString>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	08004c00 	.word	0x08004c00
 8000ec0:	08004c3c 	.word	0x08004c3c
 8000ec4:	20000174 	.word	0x20000174
 8000ec8:	08004c90 	.word	0x08004c90
 8000ecc:	08004c9c 	.word	0x08004c9c
 8000ed0:	08004ca8 	.word	0x08004ca8
 8000ed4:	08004cc0 	.word	0x08004cc0
 8000ed8:	08004d00 	.word	0x08004d00
 8000edc:	08004d1c 	.word	0x08004d1c
 8000ee0:	08004d34 	.word	0x08004d34

08000ee4 <SerialUpload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */
void SerialUpload(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

  Serial_PutString((uint8_t *)"\n\n\rSelect Receive File\n\r");
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <SerialUpload+0x64>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff fcd6 	bl	80008a4 <Serial_PutString>

  HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 8000ef8:	2301      	movs	r3, #1
 8000efa:	425b      	negs	r3, r3
 8000efc:	1df9      	adds	r1, r7, #7
 8000efe:	4813      	ldr	r0, [pc, #76]	; (8000f4c <SerialUpload+0x68>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	f002 ffb7 	bl	8003e74 <HAL_UART_Receive>
  if ( status == CRC16)
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b43      	cmp	r3, #67	; 0x43
 8000f0c:	d117      	bne.n	8000f3e <SerialUpload+0x5a>
  {
    /* Transmit the flash image through ymodem protocol */
    status = Ymodem_Transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8000f0e:	23e0      	movs	r3, #224	; 0xe0
 8000f10:	01da      	lsls	r2, r3, #7
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <SerialUpload+0x6c>)
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <SerialUpload+0x70>)
 8000f16:	0019      	movs	r1, r3
 8000f18:	f000 fc96 	bl	8001848 <Ymodem_Transmit>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	001a      	movs	r2, r3
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	701a      	strb	r2, [r3, #0]

    if (status != 0)
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <SerialUpload+0x52>
    {
      Serial_PutString((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <SerialUpload+0x74>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff fcb8 	bl	80008a4 <Serial_PutString>
    else
    {
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
    }
  }
}
 8000f34:	e003      	b.n	8000f3e <SerialUpload+0x5a>
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <SerialUpload+0x78>)
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff fcb3 	bl	80008a4 <Serial_PutString>
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	08004d54 	.word	0x08004d54
 8000f4c:	200000d4 	.word	0x200000d4
 8000f50:	08004d70 	.word	0x08004d70
 8000f54:	08008000 	.word	0x08008000
 8000f58:	08004d88 	.word	0x08004d88
 8000f5c:	08004db4 	.word	0x08004db4

08000f60 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b091      	sub	sp, #68	; 0x44
 8000f64:	af00      	add	r7, sp, #0
  uint8_t key = 0;
 8000f66:	233b      	movs	r3, #59	; 0x3b
 8000f68:	18fb      	adds	r3, r7, r3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]

  Serial_PutString((uint8_t *)"\r\n======================================================================");
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <Main_Menu+0x1b0>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff fc97 	bl	80008a4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=              (C) COPYRIGHT 2023 STMicroelectronics                 =");
 8000f76:	4b67      	ldr	r3, [pc, #412]	; (8001114 <Main_Menu+0x1b4>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff fc93 	bl	80008a4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <Main_Menu+0x1b8>)
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fc8f 	bl	80008a4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=  STM32G0xx In-Application Programming Application  (Version 1.0.0) =");
 8000f86:	4b65      	ldr	r3, [pc, #404]	; (800111c <Main_Menu+0x1bc>)
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fc8b 	bl	80008a4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <Main_Menu+0x1b8>)
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff fc87 	bl	80008a4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                   By BFM Application Team          =");
 8000f96:	4b62      	ldr	r3, [pc, #392]	; (8001120 <Main_Menu+0x1c0>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff fc83 	bl	80008a4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n======================================================================");
 8000f9e:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <Main_Menu+0x1b0>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff fc7f 	bl	80008a4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n\r\n");
 8000fa6:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <Main_Menu+0x1c4>)
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff fc7b 	bl	80008a4 <Serial_PutString>


  while (1)
  {

    Serial_PutString((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <Main_Menu+0x1c8>)
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff fc77 	bl	80008a4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <Main_Menu+0x1cc>)
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff fc73 	bl	80008a4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 8000fbe:	4b5c      	ldr	r3, [pc, #368]	; (8001130 <Main_Menu+0x1d0>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fc6f 	bl	80008a4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 8000fc6:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <Main_Menu+0x1d4>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff fc6b 	bl	80008a4 <Serial_PutString>

    /* Test if any sector of Flash memory where user application will be loaded is write protected */
    FLASH_OBProgramInitTypeDef config;
    config.WRPArea=1;
 8000fce:	003b      	movs	r3, r7
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	605a      	str	r2, [r3, #4]
     HAL_FLASHEx_OBGetConfig( &config );
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 fbf4 	bl	80027c4 <HAL_FLASHEx_OBGetConfig>
    FlashProtection = FLASH_If_GetWriteProtectionStatus();
 8000fdc:	f7ff fd32 	bl	8000a44 <FLASH_If_GetWriteProtectionStatus>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	4b55      	ldr	r3, [pc, #340]	; (8001138 <Main_Menu+0x1d8>)
 8000fe4:	601a      	str	r2, [r3, #0]


    if(FlashProtection != FLASHIF_PROTECTION_NONE)
 8000fe6:	4b54      	ldr	r3, [pc, #336]	; (8001138 <Main_Menu+0x1d8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <Main_Menu+0x98>
    {
      Serial_PutString((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 8000fee:	4b53      	ldr	r3, [pc, #332]	; (800113c <Main_Menu+0x1dc>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff fc57 	bl	80008a4 <Serial_PutString>
 8000ff6:	e003      	b.n	8001000 <Main_Menu+0xa0>
    }
    else
    {
      Serial_PutString((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 8000ff8:	4b51      	ldr	r3, [pc, #324]	; (8001140 <Main_Menu+0x1e0>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff fc52 	bl	80008a4 <Serial_PutString>
    }
    Serial_PutString((uint8_t *)"==========================================================\r\n\n");
 8001000:	4b50      	ldr	r3, [pc, #320]	; (8001144 <Main_Menu+0x1e4>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff fc4e 	bl	80008a4 <Serial_PutString>

    /* Clean the input path */
    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001008:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <Main_Menu+0x1e8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699a      	ldr	r2, [r3, #24]
 800100e:	4b4e      	ldr	r3, [pc, #312]	; (8001148 <Main_Menu+0x1e8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2108      	movs	r1, #8
 8001014:	430a      	orrs	r2, r1
 8001016:	619a      	str	r2, [r3, #24]
 8001018:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <Main_Menu+0x1e8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	699a      	ldr	r2, [r3, #24]
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <Main_Menu+0x1e8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2110      	movs	r1, #16
 8001024:	430a      	orrs	r2, r1
 8001026:	619a      	str	r2, [r3, #24]
    __HAL_UART_CLEAR_IT(&UartHandle, UART_CLEAR_OREF);
 8001028:	4b47      	ldr	r3, [pc, #284]	; (8001148 <Main_Menu+0x1e8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2208      	movs	r2, #8
 800102e:	621a      	str	r2, [r3, #32]

    /* Receive key */
    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 8001030:	2301      	movs	r3, #1
 8001032:	425b      	negs	r3, r3
 8001034:	243b      	movs	r4, #59	; 0x3b
 8001036:	1939      	adds	r1, r7, r4
 8001038:	4843      	ldr	r0, [pc, #268]	; (8001148 <Main_Menu+0x1e8>)
 800103a:	2201      	movs	r2, #1
 800103c:	f002 ff1a 	bl	8003e74 <HAL_UART_Receive>



    switch (key)
 8001040:	193b      	adds	r3, r7, r4
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b34      	cmp	r3, #52	; 0x34
 8001046:	d026      	beq.n	8001096 <Main_Menu+0x136>
 8001048:	dc5c      	bgt.n	8001104 <Main_Menu+0x1a4>
 800104a:	2b33      	cmp	r3, #51	; 0x33
 800104c:	d00b      	beq.n	8001066 <Main_Menu+0x106>
 800104e:	dc59      	bgt.n	8001104 <Main_Menu+0x1a4>
 8001050:	2b31      	cmp	r3, #49	; 0x31
 8001052:	d002      	beq.n	800105a <Main_Menu+0xfa>
 8001054:	2b32      	cmp	r3, #50	; 0x32
 8001056:	d003      	beq.n	8001060 <Main_Menu+0x100>
 8001058:	e054      	b.n	8001104 <Main_Menu+0x1a4>
    {
    case '1' :
      /* Download user application in the Flash */
      SerialDownload();
 800105a:	f7ff fecb 	bl	8000df4 <SerialDownload>
      break;
 800105e:	e056      	b.n	800110e <Main_Menu+0x1ae>
    case '2' :
      /* Upload user application from the Flash */
      SerialUpload();
 8001060:	f7ff ff40 	bl	8000ee4 <SerialUpload>
      break;
 8001064:	e053      	b.n	800110e <Main_Menu+0x1ae>
    case '3' :
      Serial_PutString((uint8_t *)"Start program execution......\r\n\n");
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <Main_Menu+0x1ec>)
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff fc1b 	bl	80008a4 <Serial_PutString>
      /* execute the new program */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <Main_Menu+0x1f0>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <Main_Menu+0x1f4>)
 8001074:	601a      	str	r2, [r3, #0]
      /* Jump to user application */
      JumpToApplication = (pFunction) JumpAddress;
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <Main_Menu+0x1f4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	001a      	movs	r2, r3
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <Main_Menu+0x1f8>)
 800107e:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <Main_Menu+0x1fc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001088:	f383 8808 	msr	MSP, r3
}
 800108c:	46c0      	nop			; (mov r8, r8)
      JumpToApplication();
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <Main_Menu+0x1f8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4798      	blx	r3
      break;
 8001094:	e03b      	b.n	800110e <Main_Menu+0x1ae>
    case '4' :
      if (FlashProtection != FLASHIF_PROTECTION_NONE)
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <Main_Menu+0x1d8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d016      	beq.n	80010cc <Main_Menu+0x16c>
      {
        /* Disable the write protection */
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff fcf9 	bl	8000a96 <FLASH_If_WriteProtectionConfig>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d10c      	bne.n	80010c2 <Main_Menu+0x162>
        {
          Serial_PutString((uint8_t *)"Write Protection disabled...\r\n");
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <Main_Menu+0x200>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff fbfa 	bl	80008a4 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <Main_Menu+0x204>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff fbf6 	bl	80008a4 <Serial_PutString>
          /* Launch the option byte loading */
          HAL_FLASH_OB_Launch();
 80010b8:	f001 f9e0 	bl	800247c <HAL_FLASH_OB_Launch>
          HAL_FLASH_Lock();
 80010bc:	f001 f99a 	bl	80023f4 <HAL_FLASH_Lock>
        else
        {
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
        }
      }
      break;
 80010c0:	e025      	b.n	800110e <Main_Menu+0x1ae>
          Serial_PutString((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 80010c2:	4b29      	ldr	r3, [pc, #164]	; (8001168 <Main_Menu+0x208>)
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fbed 	bl	80008a4 <Serial_PutString>
      break;
 80010ca:	e020      	b.n	800110e <Main_Menu+0x1ae>
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fce2 	bl	8000a96 <FLASH_If_WriteProtectionConfig>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d111      	bne.n	80010fa <Main_Menu+0x19a>
          Serial_PutString((uint8_t *)"Write Protection enabled...\r\n");
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <Main_Menu+0x20c>)
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff fbe3 	bl	80008a4 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <Main_Menu+0x204>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff fbdf 	bl	80008a4 <Serial_PutString>
          FlashProtection = FLASH_If_GetWriteProtectionStatus();
 80010e6:	f7ff fcad 	bl	8000a44 <FLASH_If_GetWriteProtectionStatus>
 80010ea:	0002      	movs	r2, r0
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <Main_Menu+0x1d8>)
 80010ee:	601a      	str	r2, [r3, #0]
          HAL_FLASH_OB_Launch();
 80010f0:	f001 f9c4 	bl	800247c <HAL_FLASH_OB_Launch>
          HAL_FLASH_Lock();
 80010f4:	f001 f97e 	bl	80023f4 <HAL_FLASH_Lock>
      break;
 80010f8:	e009      	b.n	800110e <Main_Menu+0x1ae>
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <Main_Menu+0x210>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff fbd1 	bl	80008a4 <Serial_PutString>
      break;
 8001102:	e004      	b.n	800110e <Main_Menu+0x1ae>
	default:
		Serial_PutString((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <Main_Menu+0x214>)
 8001106:	0018      	movs	r0, r3
 8001108:	f7ff fbcc 	bl	80008a4 <Serial_PutString>
	break;
 800110c:	46c0      	nop			; (mov r8, r8)
  {
 800110e:	e74e      	b.n	8000fae <Main_Menu+0x4e>
 8001110:	08004dd4 	.word	0x08004dd4
 8001114:	08004e20 	.word	0x08004e20
 8001118:	08004e6c 	.word	0x08004e6c
 800111c:	08004eb8 	.word	0x08004eb8
 8001120:	08004f04 	.word	0x08004f04
 8001124:	08004f50 	.word	0x08004f50
 8001128:	08004f58 	.word	0x08004f58
 800112c:	08004f98 	.word	0x08004f98
 8001130:	08004fd8 	.word	0x08004fd8
 8001134:	08005018 	.word	0x08005018
 8001138:	20000170 	.word	0x20000170
 800113c:	08005058 	.word	0x08005058
 8001140:	08005098 	.word	0x08005098
 8001144:	080050d8 	.word	0x080050d8
 8001148:	200000d4 	.word	0x200000d4
 800114c:	08005118 	.word	0x08005118
 8001150:	08008004 	.word	0x08008004
 8001154:	2000016c 	.word	0x2000016c
 8001158:	20000168 	.word	0x20000168
 800115c:	08008000 	.word	0x08008000
 8001160:	0800513c 	.word	0x0800513c
 8001164:	0800515c 	.word	0x0800515c
 8001168:	0800517c 	.word	0x0800517c
 800116c:	080051ac 	.word	0x080051ac
 8001170:	080051cc 	.word	0x080051cc
 8001174:	080051f8 	.word	0x080051f8

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_MspInit+0x44>)
 8001180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_MspInit+0x44>)
 8001184:	2101      	movs	r1, #1
 8001186:	430a      	orrs	r2, r1
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_MspInit+0x44>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2201      	movs	r2, #1
 8001190:	4013      	ands	r3, r2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_MspInit+0x44>)
 8001198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_MspInit+0x44>)
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	0549      	lsls	r1, r1, #21
 80011a0:	430a      	orrs	r2, r1
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_MspInit+0x44>)
 80011a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	055b      	lsls	r3, r3, #21
 80011ac:	4013      	ands	r3, r2
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40021000 	.word	0x40021000

080011c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_CRC_MspInit+0x38>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10d      	bne.n	80011ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_CRC_MspInit+0x3c>)
 80011d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_CRC_MspInit+0x3c>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	0149      	lsls	r1, r1, #5
 80011dc:	430a      	orrs	r2, r1
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_CRC_MspInit+0x3c>)
 80011e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b004      	add	sp, #16
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40023000 	.word	0x40023000
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b097      	sub	sp, #92	; 0x5c
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	2344      	movs	r3, #68	; 0x44
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	0018      	movs	r0, r3
 800120e:	2314      	movs	r3, #20
 8001210:	001a      	movs	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	f003 fcd6 	bl	8004bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	2410      	movs	r4, #16
 800121a:	193b      	adds	r3, r7, r4
 800121c:	0018      	movs	r0, r3
 800121e:	2334      	movs	r3, #52	; 0x34
 8001220:	001a      	movs	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	f003 fcce 	bl	8004bc4 <memset>
  if(huart->Instance==USART2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <HAL_UART_MspInit+0xb8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d13e      	bne.n	80012b0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2202      	movs	r2, #2
 8001236:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001238:	193b      	adds	r3, r7, r4
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123e:	193b      	adds	r3, r7, r4
 8001240:	0018      	movs	r0, r3
 8001242:	f002 fb6d 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800124a:	f7ff fdcd 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_UART_MspInit+0xbc>)
 8001250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_UART_MspInit+0xbc>)
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	0289      	lsls	r1, r1, #10
 8001258:	430a      	orrs	r2, r1
 800125a:	63da      	str	r2, [r3, #60]	; 0x3c
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_UART_MspInit+0xbc>)
 800125e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	029b      	lsls	r3, r3, #10
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_UART_MspInit+0xbc>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_UART_MspInit+0xbc>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_UART_MspInit+0xbc>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127a:	2201      	movs	r2, #1
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001282:	2144      	movs	r1, #68	; 0x44
 8001284:	187b      	adds	r3, r7, r1
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2202      	movs	r2, #2
 800128e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2201      	movs	r2, #1
 80012a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	187a      	adds	r2, r7, r1
 80012a4:	23a0      	movs	r3, #160	; 0xa0
 80012a6:	05db      	lsls	r3, r3, #23
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f001 fc8a 	bl	8002bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b017      	add	sp, #92	; 0x5c
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40021000 	.word	0x40021000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 fd36 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 800130e:	251b      	movs	r5, #27
 8001310:	197c      	adds	r4, r7, r5
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2613      	movs	r6, #19
 8001316:	19b9      	adds	r1, r7, r6
 8001318:	484e      	ldr	r0, [pc, #312]	; (8001454 <ReceivePacket+0x15c>)
 800131a:	2201      	movs	r2, #1
 800131c:	f002 fdaa 	bl	8003e74 <HAL_UART_Receive>
 8001320:	0003      	movs	r3, r0
 8001322:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001324:	197b      	adds	r3, r7, r5
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d000      	beq.n	800132e <ReceivePacket+0x36>
 800132c:	e088      	b.n	8001440 <ReceivePacket+0x148>
  {
    switch (char1)
 800132e:	19bb      	adds	r3, r7, r6
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b61      	cmp	r3, #97	; 0x61
 8001334:	d02a      	beq.n	800138c <ReceivePacket+0x94>
 8001336:	dc2e      	bgt.n	8001396 <ReceivePacket+0x9e>
 8001338:	2b41      	cmp	r3, #65	; 0x41
 800133a:	d027      	beq.n	800138c <ReceivePacket+0x94>
 800133c:	dc2b      	bgt.n	8001396 <ReceivePacket+0x9e>
 800133e:	2b18      	cmp	r3, #24
 8001340:	d00f      	beq.n	8001362 <ReceivePacket+0x6a>
 8001342:	dc28      	bgt.n	8001396 <ReceivePacket+0x9e>
 8001344:	2b04      	cmp	r3, #4
 8001346:	d02b      	beq.n	80013a0 <ReceivePacket+0xa8>
 8001348:	dc25      	bgt.n	8001396 <ReceivePacket+0x9e>
 800134a:	2b01      	cmp	r3, #1
 800134c:	d002      	beq.n	8001354 <ReceivePacket+0x5c>
 800134e:	2b02      	cmp	r3, #2
 8001350:	d003      	beq.n	800135a <ReceivePacket+0x62>
 8001352:	e020      	b.n	8001396 <ReceivePacket+0x9e>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	61fb      	str	r3, [r7, #28]
        break;
 8001358:	e023      	b.n	80013a2 <ReceivePacket+0xaa>
      case STX:
        packet_size = PACKET_1K_SIZE;
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	61fb      	str	r3, [r7, #28]
        break;
 8001360:	e01f      	b.n	80013a2 <ReceivePacket+0xaa>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2413      	movs	r4, #19
 8001366:	1939      	adds	r1, r7, r4
 8001368:	483a      	ldr	r0, [pc, #232]	; (8001454 <ReceivePacket+0x15c>)
 800136a:	2201      	movs	r2, #1
 800136c:	f002 fd82 	bl	8003e74 <HAL_UART_Receive>
 8001370:	1e03      	subs	r3, r0, #0
 8001372:	d106      	bne.n	8001382 <ReceivePacket+0x8a>
 8001374:	193b      	adds	r3, r7, r4
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b18      	cmp	r3, #24
 800137a:	d102      	bne.n	8001382 <ReceivePacket+0x8a>
        {
          packet_size = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 8001380:	e00f      	b.n	80013a2 <ReceivePacket+0xaa>
          status = HAL_ERROR;
 8001382:	231b      	movs	r3, #27
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
        break;
 800138a:	e00a      	b.n	80013a2 <ReceivePacket+0xaa>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 800138c:	231b      	movs	r3, #27
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	2202      	movs	r2, #2
 8001392:	701a      	strb	r2, [r3, #0]
        break;
 8001394:	e005      	b.n	80013a2 <ReceivePacket+0xaa>
      default:
        status = HAL_ERROR;
 8001396:	231b      	movs	r3, #27
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
        break;
 800139e:	e000      	b.n	80013a2 <ReceivePacket+0xaa>
        break;
 80013a0:	46c0      	nop			; (mov r8, r8)
    }
    *p_data = char1;
 80013a2:	2313      	movs	r3, #19
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	2b7f      	cmp	r3, #127	; 0x7f
 80013b0:	d946      	bls.n	8001440 <ReceivePacket+0x148>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1c99      	adds	r1, r3, #2
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3304      	adds	r3, #4
 80013bc:	b29a      	uxth	r2, r3
 80013be:	251b      	movs	r5, #27
 80013c0:	197c      	adds	r4, r7, r5
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4823      	ldr	r0, [pc, #140]	; (8001454 <ReceivePacket+0x15c>)
 80013c6:	f002 fd55 	bl	8003e74 <HAL_UART_Receive>
 80013ca:	0003      	movs	r3, r0
 80013cc:	7023      	strb	r3, [r4, #0]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 80013ce:	0029      	movs	r1, r5
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d131      	bne.n	800143c <ReceivePacket+0x144>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3302      	adds	r3, #2
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3303      	adds	r3, #3
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d005      	beq.n	80013f8 <ReceivePacket+0x100>
        {
          packet_size = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e023      	b.n	8001440 <ReceivePacket+0x148>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3304      	adds	r3, #4
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	18d3      	adds	r3, r2, r3
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3305      	adds	r3, #5
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	001a      	movs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	189b      	adds	r3, r3, r2
 8001416:	617b      	str	r3, [r7, #20]
          if (HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1d19      	adds	r1, r3, #4
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <ReceivePacket+0x160>)
 8001420:	0018      	movs	r0, r3
 8001422:	f000 fdf1 	bl	8002008 <HAL_CRC_Calculate>
 8001426:	0002      	movs	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4293      	cmp	r3, r2
 800142c:	d008      	beq.n	8001440 <ReceivePacket+0x148>
          {
            packet_size = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8001432:	231b      	movs	r3, #27
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e001      	b.n	8001440 <ReceivePacket+0x148>
          }
        }
      }
      else
      {
        packet_size = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	601a      	str	r2, [r3, #0]
  return status;
 8001446:	231b      	movs	r3, #27
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	781b      	ldrb	r3, [r3, #0]
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b009      	add	sp, #36	; 0x24
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	200000d4 	.word	0x200000d4
 8001458:	200000b0 	.word	0x200000b0

0800145c <PrepareIntialPacket>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */
static void PrepareIntialPacket(uint8_t *p_data, const uint8_t *p_file_name, uint32_t length)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t i, j = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  uint8_t astring[10];

  /* first 3 bytes are constant */
  p_data[PACKET_START_INDEX] = SOH;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3301      	adds	r3, #1
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3302      	adds	r3, #2
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3303      	adds	r3, #3
 8001480:	22ff      	movs	r2, #255	; 0xff
 8001482:	701a      	strb	r2, [r3, #0]

  /* Filename written */
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e00b      	b.n	80014a2 <PrepareIntialPacket+0x46>
  {
    p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	18d2      	adds	r2, r2, r3
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	3304      	adds	r3, #4
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	18cb      	adds	r3, r1, r3
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3301      	adds	r3, #1
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	18d3      	adds	r3, r2, r3
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <PrepareIntialPacket+0x58>
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	2b3f      	cmp	r3, #63	; 0x3f
 80014b2:	d9ea      	bls.n	800148a <PrepareIntialPacket+0x2e>
  }

  p_data[i + PACKET_DATA_INDEX] = 0x00;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	3304      	adds	r3, #4
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]

  /* file size written */
  Int2Str (astring, length);
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	2314      	movs	r3, #20
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff f8a9 	bl	8000620 <Int2Str>
  i = i + PACKET_DATA_INDEX + 1;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	3305      	adds	r3, #5
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (astring[j] != '\0')
 80014d4:	e00b      	b.n	80014ee <PrepareIntialPacket+0x92>
  {
    p_data[i++] = astring[j++];
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	623a      	str	r2, [r7, #32]
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	1c51      	adds	r1, r2, #1
 80014e0:	6279      	str	r1, [r7, #36]	; 0x24
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	188a      	adds	r2, r1, r2
 80014e6:	2114      	movs	r1, #20
 80014e8:	1879      	adds	r1, r7, r1
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	7013      	strb	r3, [r2, #0]
  while (astring[j] != '\0')
 80014ee:	2314      	movs	r3, #20
 80014f0:	18fa      	adds	r2, r7, r3
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	18d3      	adds	r3, r2, r3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ec      	bne.n	80014d6 <PrepareIntialPacket+0x7a>
  }

  /* padding with zeros */
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	623b      	str	r3, [r7, #32]
 8001500:	e007      	b.n	8001512 <PrepareIntialPacket+0xb6>
  {
    p_data[j] = 0;
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	18d3      	adds	r3, r2, r3
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	3301      	adds	r3, #1
 8001510:	623b      	str	r3, [r7, #32]
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	2b83      	cmp	r3, #131	; 0x83
 8001516:	d9f4      	bls.n	8001502 <PrepareIntialPacket+0xa6>
  }
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b00a      	add	sp, #40	; 0x28
 8001520:	bd80      	pop	{r7, pc}

08001522 <PreparePacket>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */
static void PreparePacket(uint8_t *p_source, uint8_t *p_packet, uint8_t pkt_nr, uint32_t size_blk)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b088      	sub	sp, #32
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	701a      	strb	r2, [r3, #0]
  uint8_t *p_record;
  uint32_t i, size, packet_size;

  /* Make first three packet */
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	429a      	cmp	r2, r3
 800153a:	d302      	bcc.n	8001542 <PreparePacket+0x20>
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	e000      	b.n	8001544 <PreparePacket+0x22>
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	617b      	str	r3, [r7, #20]
  size = size_blk < packet_size ? size_blk : packet_size;
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	4293      	cmp	r3, r2
 800154c:	d900      	bls.n	8001550 <PreparePacket+0x2e>
 800154e:	0013      	movs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
  if (packet_size == PACKET_1K_SIZE)
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	429a      	cmp	r2, r3
 800155a:	d104      	bne.n	8001566 <PreparePacket+0x44>
  {
    p_packet[PACKET_START_INDEX] = STX;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3301      	adds	r3, #1
 8001560:	2202      	movs	r2, #2
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e003      	b.n	800156e <PreparePacket+0x4c>
  }
  else
  {
    p_packet[PACKET_START_INDEX] = SOH;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
  }
  p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3302      	adds	r3, #2
 8001572:	1dfa      	adds	r2, r7, #7
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	701a      	strb	r2, [r3, #0]
  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	3303      	adds	r3, #3
 800157c:	1dfa      	adds	r2, r7, #7
 800157e:	7812      	ldrb	r2, [r2, #0]
 8001580:	43d2      	mvns	r2, r2
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]
  p_record = p_source;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	61fb      	str	r3, [r7, #28]

  /* Filename packet has valid data */
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 800158a:	2304      	movs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	e00a      	b.n	80015a6 <PreparePacket+0x84>
  {
    p_packet[i] = *p_record++;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	61fa      	str	r2, [r7, #28]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	188a      	adds	r2, r1, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	7013      	strb	r3, [r2, #0]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	3304      	adds	r3, #4
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3ef      	bcc.n	8001590 <PreparePacket+0x6e>
  }
  if ( size  <= packet_size)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d810      	bhi.n	80015da <PreparePacket+0xb8>
  {
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	3304      	adds	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	e007      	b.n	80015d0 <PreparePacket+0xae>
    {
      p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	18d3      	adds	r3, r2, r3
 80015c6:	221a      	movs	r2, #26
 80015c8:	701a      	strb	r2, [r3, #0]
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3304      	adds	r3, #4
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3f2      	bcc.n	80015c0 <PreparePacket+0x9e>
    }
  }
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b008      	add	sp, #32
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b093      	sub	sp, #76	; 0x4c
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	643b      	str	r3, [r7, #64]	; 0x40
 80015f0:	2300      	movs	r3, #0
 80015f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f4:	2300      	movs	r3, #0
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t flashdestination, ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 80015f8:	232a      	movs	r3, #42	; 0x2a
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8001600:	4b8a      	ldr	r3, [pc, #552]	; (800182c <Ymodem_Receive+0x248>)
 8001602:	633b      	str	r3, [r7, #48]	; 0x30

  while ((session_done == 0) && (result == COM_OK))
 8001604:	e101      	b.n	800180a <Ymodem_Receive+0x226>
  {
    packets_received = 0;
 8001606:	232b      	movs	r3, #43	; 0x2b
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
    file_done = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 8001612:	e0f1      	b.n	80017f8 <Ymodem_Receive+0x214>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8001614:	4a86      	ldr	r2, [pc, #536]	; (8001830 <Ymodem_Receive+0x24c>)
 8001616:	2320      	movs	r3, #32
 8001618:	18f9      	adds	r1, r7, r3
 800161a:	4b86      	ldr	r3, [pc, #536]	; (8001834 <Ymodem_Receive+0x250>)
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff fe6b 	bl	80012f8 <ReceivePacket>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d003      	beq.n	800162e <Ymodem_Receive+0x4a>
 8001626:	2b02      	cmp	r3, #2
 8001628:	d100      	bne.n	800162c <Ymodem_Receive+0x48>
 800162a:	e0c3      	b.n	80017b4 <Ymodem_Receive+0x1d0>
 800162c:	e0cd      	b.n	80017ca <Ymodem_Receive+0x1e6>
      {
        case HAL_OK:
          errors = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <Ymodem_Receive+0x68>
 8001638:	2b02      	cmp	r3, #2
 800163a:	d10d      	bne.n	8001658 <Ymodem_Receive+0x74>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 800163c:	2006      	movs	r0, #6
 800163e:	f7ff f955 	bl	80008ec <Serial_PutByte>
              result = COM_ABORT;
 8001642:	232a      	movs	r3, #42	; 0x2a
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	2202      	movs	r2, #2
 8001648:	701a      	strb	r2, [r3, #0]
              break;
 800164a:	e0b2      	b.n	80017b2 <Ymodem_Receive+0x1ce>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 800164c:	2006      	movs	r0, #6
 800164e:	f7ff f94d 	bl	80008ec <Serial_PutByte>
              file_done = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 8001656:	e0ac      	b.n	80017b2 <Ymodem_Receive+0x1ce>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 8001658:	4b76      	ldr	r3, [pc, #472]	; (8001834 <Ymodem_Receive+0x250>)
 800165a:	789b      	ldrb	r3, [r3, #2]
 800165c:	222b      	movs	r2, #43	; 0x2b
 800165e:	18ba      	adds	r2, r7, r2
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d003      	beq.n	800166e <Ymodem_Receive+0x8a>
              {
                Serial_PutByte(NAK);
 8001666:	2015      	movs	r0, #21
 8001668:	f7ff f940 	bl	80008ec <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 800166c:	e0a0      	b.n	80017b0 <Ymodem_Receive+0x1cc>
                if (packets_received == 0)
 800166e:	232b      	movs	r3, #43	; 0x2b
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d000      	beq.n	800167a <Ymodem_Receive+0x96>
 8001678:	e075      	b.n	8001766 <Ymodem_Receive+0x182>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 800167a:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <Ymodem_Receive+0x250>)
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d069      	beq.n	8001756 <Ymodem_Receive+0x172>
                    i = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 8001686:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <Ymodem_Receive+0x254>)
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800168a:	e008      	b.n	800169e <Ymodem_Receive+0xba>
                      aFileName[i++] = *file_ptr++;
 800168c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800168e:	1c53      	adds	r3, r2, #1
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001694:	1c59      	adds	r1, r3, #1
 8001696:	6479      	str	r1, [r7, #68]	; 0x44
 8001698:	7811      	ldrb	r1, [r2, #0]
 800169a:	4a68      	ldr	r2, [pc, #416]	; (800183c <Ymodem_Receive+0x258>)
 800169c:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <Ymodem_Receive+0xc8>
 80016a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a8:	2b3f      	cmp	r3, #63	; 0x3f
 80016aa:	d9ef      	bls.n	800168c <Ymodem_Receive+0xa8>
                    aFileName[i++] = '\0';
 80016ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	647a      	str	r2, [r7, #68]	; 0x44
 80016b2:	4a62      	ldr	r2, [pc, #392]	; (800183c <Ymodem_Receive+0x258>)
 80016b4:	2100      	movs	r1, #0
 80016b6:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	3301      	adds	r3, #1
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80016c2:	e009      	b.n	80016d8 <Ymodem_Receive+0xf4>
                      file_size[i++] = *file_ptr++;
 80016c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c6:	1c53      	adds	r3, r2, #1
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6479      	str	r1, [r7, #68]	; 0x44
 80016d0:	7811      	ldrb	r1, [r2, #0]
 80016d2:	220c      	movs	r2, #12
 80016d4:	18ba      	adds	r2, r7, r2
 80016d6:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80016d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d002      	beq.n	80016e6 <Ymodem_Receive+0x102>
 80016e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	d9ee      	bls.n	80016c4 <Ymodem_Receive+0xe0>
                    file_size[i++] = '\0';
 80016e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	647a      	str	r2, [r7, #68]	; 0x44
 80016ec:	200c      	movs	r0, #12
 80016ee:	183a      	adds	r2, r7, r0
 80016f0:	2100      	movs	r1, #0
 80016f2:	54d1      	strb	r1, [r2, r3]
                    Str2Int(file_size, &filesize);
 80016f4:	231c      	movs	r3, #28
 80016f6:	18fa      	adds	r2, r7, r3
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7fe ffdd 	bl	80006bc <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a4e      	ldr	r2, [pc, #312]	; (8001840 <Ymodem_Receive+0x25c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d916      	bls.n	800173a <Ymodem_Receive+0x156>
                      tmp = CA;
 800170c:	210b      	movs	r1, #11
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2218      	movs	r2, #24
 8001712:	701a      	strb	r2, [r3, #0]
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	035b      	lsls	r3, r3, #13
 8001718:	000c      	movs	r4, r1
 800171a:	1879      	adds	r1, r7, r1
 800171c:	4849      	ldr	r0, [pc, #292]	; (8001844 <Ymodem_Receive+0x260>)
 800171e:	2201      	movs	r2, #1
 8001720:	f002 fb0c 	bl	8003d3c <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	035b      	lsls	r3, r3, #13
 8001728:	1939      	adds	r1, r7, r4
 800172a:	4846      	ldr	r0, [pc, #280]	; (8001844 <Ymodem_Receive+0x260>)
 800172c:	2201      	movs	r2, #1
 800172e:	f002 fb05 	bl	8003d3c <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8001732:	232a      	movs	r3, #42	; 0x2a
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2205      	movs	r2, #5
 8001738:	701a      	strb	r2, [r3, #0]
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 800173a:	4b3c      	ldr	r3, [pc, #240]	; (800182c <Ymodem_Receive+0x248>)
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff f8ff 	bl	8000940 <FLASH_If_Erase>
                    *p_size = filesize;
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 8001748:	2006      	movs	r0, #6
 800174a:	f7ff f8cf 	bl	80008ec <Serial_PutByte>
                    Serial_PutByte(CRC16);
 800174e:	2043      	movs	r0, #67	; 0x43
 8001750:	f7ff f8cc 	bl	80008ec <Serial_PutByte>
 8001754:	e024      	b.n	80017a0 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(ACK);
 8001756:	2006      	movs	r0, #6
 8001758:	f7ff f8c8 	bl	80008ec <Serial_PutByte>
                    file_done = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 8001760:	2301      	movs	r3, #1
 8001762:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 8001764:	e025      	b.n	80017b2 <Ymodem_Receive+0x1ce>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <Ymodem_Receive+0x254>)
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 800176a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	089a      	lsrs	r2, r3, #2
 8001770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff f91e 	bl	80009b4 <FLASH_If_Write>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d107      	bne.n	800178c <Ymodem_Receive+0x1a8>
                    flashdestination += packet_length;
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001780:	18d3      	adds	r3, r2, r3
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
                    Serial_PutByte(ACK);
 8001784:	2006      	movs	r0, #6
 8001786:	f7ff f8b1 	bl	80008ec <Serial_PutByte>
 800178a:	e009      	b.n	80017a0 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(CA);
 800178c:	2018      	movs	r0, #24
 800178e:	f7ff f8ad 	bl	80008ec <Serial_PutByte>
                    Serial_PutByte(CA);
 8001792:	2018      	movs	r0, #24
 8001794:	f7ff f8aa 	bl	80008ec <Serial_PutByte>
                    result = COM_DATA;
 8001798:	232a      	movs	r3, #42	; 0x2a
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2204      	movs	r2, #4
 800179e:	701a      	strb	r2, [r3, #0]
                packets_received ++;
 80017a0:	212b      	movs	r1, #43	; 0x2b
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	3201      	adds	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
                session_begin = 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80017b0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80017b2:	e021      	b.n	80017f8 <Ymodem_Receive+0x214>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 80017b4:	2018      	movs	r0, #24
 80017b6:	f7ff f899 	bl	80008ec <Serial_PutByte>
          Serial_PutByte(CA);
 80017ba:	2018      	movs	r0, #24
 80017bc:	f7ff f896 	bl	80008ec <Serial_PutByte>
          result = COM_ABORT;
 80017c0:	232a      	movs	r3, #42	; 0x2a
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]
          break;
 80017c8:	e016      	b.n	80017f8 <Ymodem_Receive+0x214>
        default:
          if (session_begin > 0)
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <Ymodem_Receive+0x1f2>
          {
            errors ++;
 80017d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d2:	3301      	adds	r3, #1
 80017d4:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 80017d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d906      	bls.n	80017ea <Ymodem_Receive+0x206>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 80017dc:	2018      	movs	r0, #24
 80017de:	f7ff f885 	bl	80008ec <Serial_PutByte>
            Serial_PutByte(CA);
 80017e2:	2018      	movs	r0, #24
 80017e4:	f7ff f882 	bl	80008ec <Serial_PutByte>
 80017e8:	e005      	b.n	80017f6 <Ymodem_Receive+0x212>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 80017ea:	2043      	movs	r0, #67	; 0x43
 80017ec:	f7ff f87e 	bl	80008ec <Serial_PutByte>
            Serial_PutByte(ACK); //BFM
 80017f0:	2006      	movs	r0, #6
 80017f2:	f7ff f87b 	bl	80008ec <Serial_PutByte>
          }
          break;
 80017f6:	46c0      	nop			; (mov r8, r8)
    while ((file_done == 0) && (result == COM_OK))
 80017f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <Ymodem_Receive+0x226>
 80017fe:	232a      	movs	r3, #42	; 0x2a
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d100      	bne.n	800180a <Ymodem_Receive+0x226>
 8001808:	e704      	b.n	8001614 <Ymodem_Receive+0x30>
  while ((session_done == 0) && (result == COM_OK))
 800180a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <Ymodem_Receive+0x238>
 8001810:	232a      	movs	r3, #42	; 0x2a
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d100      	bne.n	800181c <Ymodem_Receive+0x238>
 800181a:	e6f4      	b.n	8001606 <Ymodem_Receive+0x22>
      }
    }
  }
  return result;
 800181c:	232a      	movs	r3, #42	; 0x2a
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	781b      	ldrb	r3, [r3, #0]
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b013      	add	sp, #76	; 0x4c
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	08008000 	.word	0x08008000
 8001830:	00002710 	.word	0x00002710
 8001834:	200001b4 	.word	0x200001b4
 8001838:	200001b8 	.word	0x200001b8
 800183c:	20000174 	.word	0x20000174
 8001840:	00007001 	.word	0x00007001
 8001844:	200000d4 	.word	0x200000d4

08001848 <Ymodem_Transmit>:
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef Ymodem_Transmit (uint8_t *p_buf, const uint8_t *p_file_name, uint32_t file_size)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b08f      	sub	sp, #60	; 0x3c
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t errors = 0, ack_recpt = 0, size = 0, pkt_size;
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
 8001858:	2300      	movs	r3, #0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t *p_buf_int;
  COM_StatusTypeDef result = COM_OK;
 8001860:	2323      	movs	r3, #35	; 0x23
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
  uint32_t blk_number = 1;
 8001868:	2301      	movs	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
#else /* CRC16_F */
  uint8_t temp_chksum;
#endif /* CRC16_F */

  /* Prepare first block - header */
  PrepareIntialPacket(aPacketData, p_file_name, file_size);
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	4bb7      	ldr	r3, [pc, #732]	; (8001b50 <Ymodem_Transmit+0x308>)
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff fdf2 	bl	800145c <PrepareIntialPacket>

  while (( !ack_recpt ) && ( result == COM_OK ))
 8001878:	e06a      	b.n	8001950 <Ymodem_Transmit+0x108>
  {
    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	035b      	lsls	r3, r3, #13
 800187e:	49b5      	ldr	r1, [pc, #724]	; (8001b54 <Ymodem_Transmit+0x30c>)
 8001880:	48b5      	ldr	r0, [pc, #724]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001882:	2283      	movs	r2, #131	; 0x83
 8001884:	f002 fa5a 	bl	8003d3c <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F
    temp_crc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8001888:	49b4      	ldr	r1, [pc, #720]	; (8001b5c <Ymodem_Transmit+0x314>)
 800188a:	4bb5      	ldr	r3, [pc, #724]	; (8001b60 <Ymodem_Transmit+0x318>)
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	0018      	movs	r0, r3
 8001890:	f000 fbba 	bl	8002008 <HAL_CRC_Calculate>
 8001894:	0003      	movs	r3, r0
 8001896:	617b      	str	r3, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	b2db      	uxtb	r3, r3
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff f824 	bl	80008ec <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff f81f 	bl	80008ec <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	035b      	lsls	r3, r3, #13
 80018b2:	2410      	movs	r4, #16
 80018b4:	1939      	adds	r1, r7, r4
 80018b6:	48a8      	ldr	r0, [pc, #672]	; (8001b58 <Ymodem_Transmit+0x310>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	f002 fadb 	bl	8003e74 <HAL_UART_Receive>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d13c      	bne.n	800193c <Ymodem_Transmit+0xf4>
    {
      if (a_rx_ctrl[0] == ACK)
 80018c2:	0022      	movs	r2, r4
 80018c4:	18bb      	adds	r3, r7, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d109      	bne.n	80018e0 <Ymodem_Transmit+0x98>
      {
        ack_recpt = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
        HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT); //BFM added to wait for the 'C'
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	035b      	lsls	r3, r3, #13
 80018d4:	18b9      	adds	r1, r7, r2
 80018d6:	48a0      	ldr	r0, [pc, #640]	; (8001b58 <Ymodem_Transmit+0x310>)
 80018d8:	2201      	movs	r2, #1
 80018da:	f002 facb 	bl	8003e74 <HAL_UART_Receive>
 80018de:	e030      	b.n	8001942 <Ymodem_Transmit+0xfa>
      }
      else if (a_rx_ctrl[0] == CA)
 80018e0:	2410      	movs	r4, #16
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b18      	cmp	r3, #24
 80018e8:	d12b      	bne.n	8001942 <Ymodem_Transmit+0xfa>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	035b      	lsls	r3, r3, #13
 80018ee:	1939      	adds	r1, r7, r4
 80018f0:	4899      	ldr	r0, [pc, #612]	; (8001b58 <Ymodem_Transmit+0x310>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	f002 fabe 	bl	8003e74 <HAL_UART_Receive>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d122      	bne.n	8001942 <Ymodem_Transmit+0xfa>
 80018fc:	193b      	adds	r3, r7, r4
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b18      	cmp	r3, #24
 8001902:	d11e      	bne.n	8001942 <Ymodem_Transmit+0xfa>
        {
          HAL_Delay( 2 );
 8001904:	2002      	movs	r0, #2
 8001906:	f000 fa41 	bl	8001d8c <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800190a:	4b93      	ldr	r3, [pc, #588]	; (8001b58 <Ymodem_Transmit+0x310>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	4b91      	ldr	r3, [pc, #580]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2108      	movs	r1, #8
 8001916:	430a      	orrs	r2, r1
 8001918:	619a      	str	r2, [r3, #24]
 800191a:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <Ymodem_Transmit+0x310>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	4b8d      	ldr	r3, [pc, #564]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2110      	movs	r1, #16
 8001926:	430a      	orrs	r2, r1
 8001928:	619a      	str	r2, [r3, #24]
          __HAL_UART_CLEAR_IT(&UartHandle, UART_CLEAR_OREF);
 800192a:	4b8b      	ldr	r3, [pc, #556]	; (8001b58 <Ymodem_Transmit+0x310>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2208      	movs	r2, #8
 8001930:	621a      	str	r2, [r3, #32]
          result = COM_ABORT;
 8001932:	2323      	movs	r3, #35	; 0x23
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e002      	b.n	8001942 <Ymodem_Transmit+0xfa>
        }
      }
    }
    else
    {
      errors++;
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	3301      	adds	r3, #1
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (errors >= MAX_ERRORS)
 8001942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001944:	2b04      	cmp	r3, #4
 8001946:	d903      	bls.n	8001950 <Ymodem_Transmit+0x108>
    {
      result = COM_ERROR;
 8001948:	2323      	movs	r3, #35	; 0x23
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001952:	2b00      	cmp	r3, #0
 8001954:	d104      	bne.n	8001960 <Ymodem_Transmit+0x118>
 8001956:	2323      	movs	r3, #35	; 0x23
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d08c      	beq.n	800187a <Ymodem_Transmit+0x32>
    }
  }

  p_buf_int = p_buf;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  size = file_size;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Here 1024 bytes length is used to send the packets */
  while ((size) && (result == COM_OK ))
 8001968:	e078      	b.n	8001a5c <Ymodem_Transmit+0x214>
  {
    /* Prepare next packet */
    PreparePacket(p_buf_int, aPacketData, blk_number, size);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	4977      	ldr	r1, [pc, #476]	; (8001b50 <Ymodem_Transmit+0x308>)
 8001972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001974:	f7ff fdd5 	bl	8001522 <PreparePacket>
    ack_recpt = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
    a_rx_ctrl[0] = 0;
 800197c:	2310      	movs	r3, #16
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
    errors = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34

    /* Resend packet if NAK for few times else end of communication */
    while (( !ack_recpt ) && ( result == COM_OK ))
 8001988:	e060      	b.n	8001a4c <Ymodem_Transmit+0x204>
    {
      /* Send next packet */
      if (size >= PACKET_1K_SIZE)
 800198a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	429a      	cmp	r2, r3
 8001992:	d303      	bcc.n	800199c <Ymodem_Transmit+0x154>
      {
        pkt_size = PACKET_1K_SIZE;
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
 800199a:	e001      	b.n	80019a0 <Ymodem_Transmit+0x158>
      }
      else
      {
        pkt_size = PACKET_SIZE;
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3303      	adds	r3, #3
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	035b      	lsls	r3, r3, #13
 80019ac:	4969      	ldr	r1, [pc, #420]	; (8001b54 <Ymodem_Transmit+0x30c>)
 80019ae:	486a      	ldr	r0, [pc, #424]	; (8001b58 <Ymodem_Transmit+0x310>)
 80019b0:	f002 f9c4 	bl	8003d3c <HAL_UART_Transmit>

      /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F
      temp_crc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], pkt_size);
 80019b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b6:	4969      	ldr	r1, [pc, #420]	; (8001b5c <Ymodem_Transmit+0x314>)
 80019b8:	4b69      	ldr	r3, [pc, #420]	; (8001b60 <Ymodem_Transmit+0x318>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 fb24 	bl	8002008 <HAL_CRC_Calculate>
 80019c0:	0003      	movs	r3, r0
 80019c2:	617b      	str	r3, [r7, #20]
      Serial_PutByte(temp_crc >> 8);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7fe ff8e 	bl	80008ec <Serial_PutByte>
      Serial_PutByte(temp_crc & 0xFF);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7fe ff89 	bl	80008ec <Serial_PutByte>
      temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], pkt_size);
      Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

      /* Wait for Ack */
      if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == ACK))
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	035b      	lsls	r3, r3, #13
 80019de:	2410      	movs	r4, #16
 80019e0:	1939      	adds	r1, r7, r4
 80019e2:	485d      	ldr	r0, [pc, #372]	; (8001b58 <Ymodem_Transmit+0x310>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	f002 fa45 	bl	8003e74 <HAL_UART_Receive>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d124      	bne.n	8001a38 <Ymodem_Transmit+0x1f0>
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d120      	bne.n	8001a38 <Ymodem_Transmit+0x1f0>
      {
        ack_recpt = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
        if (size > pkt_size)
 80019fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d913      	bls.n	8001a2a <Ymodem_Transmit+0x1e2>
        {
          p_buf_int += pkt_size;
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	18d3      	adds	r3, r2, r3
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
          size -= pkt_size;
 8001a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	2b1c      	cmp	r3, #28
 8001a16:	d104      	bne.n	8001a22 <Ymodem_Transmit+0x1da>
          {
            result = COM_LIMIT; /* boundary error */
 8001a18:	2323      	movs	r3, #35	; 0x23
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	2205      	movs	r2, #5
 8001a1e:	701a      	strb	r2, [r3, #0]
        if (size > pkt_size)
 8001a20:	e00d      	b.n	8001a3e <Ymodem_Transmit+0x1f6>
          }
          else
          {
            blk_number++;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
        if (size > pkt_size)
 8001a28:	e009      	b.n	8001a3e <Ymodem_Transmit+0x1f6>
          }
        }
        else
        {
          p_buf_int += pkt_size;
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	18d3      	adds	r3, r2, r3
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
          size = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (size > pkt_size)
 8001a36:	e002      	b.n	8001a3e <Ymodem_Transmit+0x1f6>
        }
      }
      else
      {
        errors++;
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
      }

      /* Resend packet if NAK  for a count of 10 else end of communication */
      if (errors >= MAX_ERRORS)
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d903      	bls.n	8001a4c <Ymodem_Transmit+0x204>
      {
        result = COM_ERROR;
 8001a44:	2323      	movs	r3, #35	; 0x23
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
    while (( !ack_recpt ) && ( result == COM_OK ))
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d104      	bne.n	8001a5c <Ymodem_Transmit+0x214>
 8001a52:	2323      	movs	r3, #35	; 0x23
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d096      	beq.n	800198a <Ymodem_Transmit+0x142>
  while ((size) && (result == COM_OK ))
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <Ymodem_Transmit+0x226>
 8001a62:	2323      	movs	r3, #35	; 0x23
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d100      	bne.n	8001a6e <Ymodem_Transmit+0x226>
 8001a6c:	e77d      	b.n	800196a <Ymodem_Transmit+0x122>
      }
    }
  }

  /* Sending End Of Transmission char */
  ack_recpt = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  a_rx_ctrl[0] = 0x00;
 8001a72:	2310      	movs	r3, #16
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
  errors = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001a7e:	e04b      	b.n	8001b18 <Ymodem_Transmit+0x2d0>
  {
    Serial_PutByte(EOT);
 8001a80:	2004      	movs	r0, #4
 8001a82:	f7fe ff33 	bl	80008ec <Serial_PutByte>

    /* Wait for Ack */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	035b      	lsls	r3, r3, #13
 8001a8a:	2410      	movs	r4, #16
 8001a8c:	1939      	adds	r1, r7, r4
 8001a8e:	4832      	ldr	r0, [pc, #200]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	f002 f9ef 	bl	8003e74 <HAL_UART_Receive>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d134      	bne.n	8001b04 <Ymodem_Transmit+0x2bc>
    {
      if (a_rx_ctrl[0] == ACK)
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d102      	bne.n	8001aa8 <Ymodem_Transmit+0x260>
      {
        ack_recpt = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa6:	e030      	b.n	8001b0a <Ymodem_Transmit+0x2c2>
      }
      else if (a_rx_ctrl[0] == CA)
 8001aa8:	2410      	movs	r4, #16
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b18      	cmp	r3, #24
 8001ab0:	d12b      	bne.n	8001b0a <Ymodem_Transmit+0x2c2>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	035b      	lsls	r3, r3, #13
 8001ab6:	1939      	adds	r1, r7, r4
 8001ab8:	4827      	ldr	r0, [pc, #156]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	f002 f9da 	bl	8003e74 <HAL_UART_Receive>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d122      	bne.n	8001b0a <Ymodem_Transmit+0x2c2>
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b18      	cmp	r3, #24
 8001aca:	d11e      	bne.n	8001b0a <Ymodem_Transmit+0x2c2>
        {
          HAL_Delay( 2 );
 8001acc:	2002      	movs	r0, #2
 8001ace:	f000 f95d 	bl	8001d8c <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2108      	movs	r1, #8
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	619a      	str	r2, [r3, #24]
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2110      	movs	r1, #16
 8001aee:	430a      	orrs	r2, r1
 8001af0:	619a      	str	r2, [r3, #24]
          __HAL_UART_CLEAR_IT(&UartHandle, UART_CLEAR_OREF);
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <Ymodem_Transmit+0x310>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2208      	movs	r2, #8
 8001af8:	621a      	str	r2, [r3, #32]
          result = COM_ABORT;
 8001afa:	2323      	movs	r3, #35	; 0x23
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e002      	b.n	8001b0a <Ymodem_Transmit+0x2c2>
        }
      }
    }
    else
    {
      errors++;
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	3301      	adds	r3, #1
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (errors >=  MAX_ERRORS)
 8001b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d903      	bls.n	8001b18 <Ymodem_Transmit+0x2d0>
    {
      result = COM_ERROR;
 8001b10:	2323      	movs	r3, #35	; 0x23
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d104      	bne.n	8001b28 <Ymodem_Transmit+0x2e0>
 8001b1e:	2323      	movs	r3, #35	; 0x23
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ab      	beq.n	8001a80 <Ymodem_Transmit+0x238>
    }
  }

  /* Empty packet sent - some terminal emulators need this to close session */
  if ( result == COM_OK )
 8001b28:	2323      	movs	r3, #35	; 0x23
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d16b      	bne.n	8001c0a <Ymodem_Transmit+0x3c2>
  {
    /* Preparing an empty packet */
    aPacketData[PACKET_START_INDEX] = SOH;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <Ymodem_Transmit+0x308>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	705a      	strb	r2, [r3, #1]
    aPacketData[PACKET_NUMBER_INDEX] = 0;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <Ymodem_Transmit+0x308>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	709a      	strb	r2, [r3, #2]
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <Ymodem_Transmit+0x308>)
 8001b40:	22ff      	movs	r2, #255	; 0xff
 8001b42:	70da      	strb	r2, [r3, #3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001b44:	231b      	movs	r3, #27
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2204      	movs	r2, #4
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	e015      	b.n	8001b7a <Ymodem_Transmit+0x332>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	200001b4 	.word	0x200001b4
 8001b54:	200001b5 	.word	0x200001b5
 8001b58:	200000d4 	.word	0x200000d4
 8001b5c:	200001b8 	.word	0x200001b8
 8001b60:	200000b0 	.word	0x200000b0
    {
      aPacketData [i] = 0x00;
 8001b64:	201b      	movs	r0, #27
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4a2b      	ldr	r2, [pc, #172]	; (8001c18 <Ymodem_Transmit+0x3d0>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	54d1      	strb	r1, [r2, r3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001b70:	183b      	adds	r3, r7, r0
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	183b      	adds	r3, r7, r0
 8001b76:	3201      	adds	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	231b      	movs	r3, #27
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b83      	cmp	r3, #131	; 0x83
 8001b82:	d9ef      	bls.n	8001b64 <Ymodem_Transmit+0x31c>
    }

    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	035b      	lsls	r3, r3, #13
 8001b88:	4924      	ldr	r1, [pc, #144]	; (8001c1c <Ymodem_Transmit+0x3d4>)
 8001b8a:	4825      	ldr	r0, [pc, #148]	; (8001c20 <Ymodem_Transmit+0x3d8>)
 8001b8c:	2283      	movs	r2, #131	; 0x83
 8001b8e:	f002 f8d5 	bl	8003d3c <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F
    temp_crc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8001b92:	4924      	ldr	r1, [pc, #144]	; (8001c24 <Ymodem_Transmit+0x3dc>)
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <Ymodem_Transmit+0x3e0>)
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 fa35 	bl	8002008 <HAL_CRC_Calculate>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	617b      	str	r3, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7fe fe9f 	bl	80008ec <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7fe fe9a 	bl	80008ec <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	035b      	lsls	r3, r3, #13
 8001bbc:	2410      	movs	r4, #16
 8001bbe:	1939      	adds	r1, r7, r4
 8001bc0:	4817      	ldr	r0, [pc, #92]	; (8001c20 <Ymodem_Transmit+0x3d8>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f002 f956 	bl	8003e74 <HAL_UART_Receive>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d11e      	bne.n	8001c0a <Ymodem_Transmit+0x3c2>
    {
      if (a_rx_ctrl[0] == CA)
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b18      	cmp	r3, #24
 8001bd2:	d11a      	bne.n	8001c0a <Ymodem_Transmit+0x3c2>
      {
          HAL_Delay( 2 );
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f000 f8d9 	bl	8001d8c <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <Ymodem_Transmit+0x3d8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <Ymodem_Transmit+0x3d8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2108      	movs	r1, #8
 8001be6:	430a      	orrs	r2, r1
 8001be8:	619a      	str	r2, [r3, #24]
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <Ymodem_Transmit+0x3d8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <Ymodem_Transmit+0x3d8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	619a      	str	r2, [r3, #24]
          __HAL_UART_CLEAR_IT(&UartHandle, UART_CLEAR_OREF);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Ymodem_Transmit+0x3d8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2208      	movs	r2, #8
 8001c00:	621a      	str	r2, [r3, #32]
          result = COM_ABORT;
 8001c02:	2323      	movs	r3, #35	; 0x23
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	2202      	movs	r2, #2
 8001c08:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return result; /* file transmitted successfully */
 8001c0a:	2323      	movs	r3, #35	; 0x23
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	781b      	ldrb	r3, [r3, #0]
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b00f      	add	sp, #60	; 0x3c
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	200001b4 	.word	0x200001b4
 8001c1c:	200001b5 	.word	0x200001b5
 8001c20:	200000d4 	.word	0x200000d4
 8001c24:	200001b8 	.word	0x200001b8
 8001c28:	200000b0 	.word	0x200000b0

08001c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c30:	f7ff fb5d 	bl	80012ee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c36:	490d      	ldr	r1, [pc, #52]	; (8001c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <LoopForever+0xe>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	; (8001c78 <LoopForever+0x16>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c5a:	f002 ff8f 	bl	8004b7c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c5e:	f7fe ff65 	bl	8000b2c <main>

08001c62 <LoopForever>:

LoopForever:
  b LoopForever
 8001c62:	e7fe      	b.n	8001c62 <LoopForever>
  ldr   r0, =_estack
 8001c64:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001c70:	080052d0 	.word	0x080052d0
  ldr r2, =_sbss
 8001c74:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001c78:	200005dc 	.word	0x200005dc

08001c7c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC1_COMP_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_Init+0x3c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Init+0x3c>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0049      	lsls	r1, r1, #1
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 f810 	bl	8001cc0 <HAL_InitTick>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e001      	b.n	8001cb0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fa64 	bl	8001178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb0:	1dfb      	adds	r3, r7, #7
 8001cb2:	781b      	ldrb	r3, [r3, #0]
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_InitTick+0x88>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d02b      	beq.n	8001d30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_InitTick+0x8c>)
 8001cda:	681c      	ldr	r4, [r3, #0]
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_InitTick+0x88>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	23fa      	movs	r3, #250	; 0xfa
 8001ce4:	0098      	lsls	r0, r3, #2
 8001ce6:	f7fe fa0f 	bl	8000108 <__udivsi3>
 8001cea:	0003      	movs	r3, r0
 8001cec:	0019      	movs	r1, r3
 8001cee:	0020      	movs	r0, r4
 8001cf0:	f7fe fa0a 	bl	8000108 <__udivsi3>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 f913 	bl	8001f22 <HAL_SYSTICK_Config>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d112      	bne.n	8001d26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d80a      	bhi.n	8001d1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f8f2 	bl	8001ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_InitTick+0x90>)
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e00d      	b.n	8001d38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e008      	b.n	8001d38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d26:	230f      	movs	r3, #15
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e003      	b.n	8001d38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d30:	230f      	movs	r3, #15
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d38:	230f      	movs	r3, #15
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b005      	add	sp, #20
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	18d2      	adds	r2, r2, r3
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_IncTick+0x20>)
 8001d66:	601a      	str	r2, [r3, #0]
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	20000008 	.word	0x20000008
 8001d74:	200005bc 	.word	0x200005bc

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	200005bc 	.word	0x200005bc

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	001a      	movs	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	189b      	adds	r3, r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	f7ff ffe0 	bl	8001d78 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b004      	add	sp, #16
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	0002      	movs	r2, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b7f      	cmp	r3, #127	; 0x7f
 8001de8:	d828      	bhi.n	8001e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	33c0      	adds	r3, #192	; 0xc0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	589b      	ldr	r3, [r3, r2]
 8001dfa:	1dfa      	adds	r2, r7, #7
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	0011      	movs	r1, r2
 8001e00:	2203      	movs	r2, #3
 8001e02:	400a      	ands	r2, r1
 8001e04:	00d2      	lsls	r2, r2, #3
 8001e06:	21ff      	movs	r1, #255	; 0xff
 8001e08:	4091      	lsls	r1, r2
 8001e0a:	000a      	movs	r2, r1
 8001e0c:	43d2      	mvns	r2, r2
 8001e0e:	401a      	ands	r2, r3
 8001e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	401a      	ands	r2, r3
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	2303      	movs	r3, #3
 8001e22:	4003      	ands	r3, r0
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	430a      	orrs	r2, r1
 8001e34:	33c0      	adds	r3, #192	; 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e3a:	e031      	b.n	8001ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <__NVIC_SetPriority+0xd8>)
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	0019      	movs	r1, r3
 8001e44:	230f      	movs	r3, #15
 8001e46:	400b      	ands	r3, r1
 8001e48:	3b08      	subs	r3, #8
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3306      	adds	r3, #6
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1dfa      	adds	r2, r7, #7
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	400a      	ands	r2, r1
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	21ff      	movs	r1, #255	; 0xff
 8001e64:	4091      	lsls	r1, r2
 8001e66:	000a      	movs	r2, r1
 8001e68:	43d2      	mvns	r2, r2
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	401a      	ands	r2, r3
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	4003      	ands	r3, r0
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <__NVIC_SetPriority+0xd8>)
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	001c      	movs	r4, r3
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	4023      	ands	r3, r4
 8001e90:	3b08      	subs	r3, #8
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	430a      	orrs	r2, r1
 8001e96:	3306      	adds	r3, #6
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	18c3      	adds	r3, r0, r3
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	045b      	lsls	r3, r3, #17
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d301      	bcc.n	8001ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e010      	b.n	8001eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <SysTick_Config+0x44>)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff ff7c 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x44>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x44>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	210f      	movs	r1, #15
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	1c02      	adds	r2, r0, #0
 8001f08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff ffbf 	bl	8001eb0 <SysTick_Config>
 8001f32:	0003      	movs	r3, r0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e056      	b.n	8001ffc <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7f5b      	ldrb	r3, [r3, #29]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7ff f92d 	bl	80011c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	791b      	ldrb	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10c      	bne.n	8001f8e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_CRC_Init+0xc8>)
 8001f7a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2118      	movs	r1, #24
 8001f88:	438a      	bics	r2, r1
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	e00b      	b.n	8001fa6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6899      	ldr	r1, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 f94c 	bl	8002236 <HAL_CRCEx_Polynomial_Set>
 8001f9e:	1e03      	subs	r3, r0, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e02a      	b.n	8001ffc <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	795b      	ldrb	r3, [r3, #5]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d105      	bne.n	8001fba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4252      	negs	r2, r2
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	e004      	b.n	8001fc4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6912      	ldr	r2, [r2, #16]
 8001fc2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2260      	movs	r2, #96	; 0x60
 8001fcc:	4393      	bics	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}
 8002004:	04c11db7 	.word	0x04c11db7

08002008 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2202      	movs	r2, #2
 800201c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d005      	beq.n	8002042 <HAL_CRC_Calculate+0x3a>
 8002036:	d82d      	bhi.n	8002094 <HAL_CRC_Calculate+0x8c>
 8002038:	2b01      	cmp	r3, #1
 800203a:	d019      	beq.n	8002070 <HAL_CRC_Calculate+0x68>
 800203c:	2b02      	cmp	r3, #2
 800203e:	d020      	beq.n	8002082 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002040:	e028      	b.n	8002094 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e00a      	b.n	800205e <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	18d2      	adds	r2, r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3f0      	bcc.n	8002048 <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	613b      	str	r3, [r7, #16]
      break;
 800206e:	e012      	b.n	8002096 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f815 	bl	80020a6 <CRC_Handle_8>
 800207c:	0003      	movs	r3, r0
 800207e:	613b      	str	r3, [r7, #16]
      break;
 8002080:	e009      	b.n	8002096 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f89d 	bl	80021c8 <CRC_Handle_16>
 800208e:	0003      	movs	r3, r0
 8002090:	613b      	str	r3, [r7, #16]
      break;
 8002092:	e000      	b.n	8002096 <HAL_CRC_Calculate+0x8e>
      break;
 8002094:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800209c:	693b      	ldr	r3, [r7, #16]
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b006      	add	sp, #24
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b088      	sub	sp, #32
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e023      	b.n	8002100 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	18d3      	adds	r3, r2, r3
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3301      	adds	r3, #1
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	18cb      	adds	r3, r1, r3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020d2:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	18cb      	adds	r3, r1, r3
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80020e2:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	3303      	adds	r3, #3
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	18cb      	adds	r3, r1, r3
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80020f6:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3d6      	bcc.n	80020b8 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	4013      	ands	r3, r2
 8002110:	d053      	beq.n	80021ba <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2203      	movs	r2, #3
 8002116:	4013      	ands	r3, r2
 8002118:	2b01      	cmp	r3, #1
 800211a:	d107      	bne.n	800212c <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	18d2      	adds	r2, r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2203      	movs	r2, #3
 8002130:	4013      	ands	r3, r2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d119      	bne.n	800216a <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	b21a      	sxth	r2, r3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	3301      	adds	r3, #1
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	18cb      	adds	r3, r1, r3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b21b      	sxth	r3, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	b21a      	sxth	r2, r3
 8002156:	211a      	movs	r1, #26
 8002158:	187b      	adds	r3, r7, r1
 800215a:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	187a      	adds	r2, r7, r1
 8002166:	8812      	ldrh	r2, [r2, #0]
 8002168:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	4013      	ands	r3, r2
 8002170:	2b03      	cmp	r3, #3
 8002172:	d122      	bne.n	80021ba <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	18d3      	adds	r3, r2, r3
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	3301      	adds	r3, #1
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	18cb      	adds	r3, r1, r3
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b21b      	sxth	r3, r3
 8002190:	4313      	orrs	r3, r2
 8002192:	b21a      	sxth	r2, r3
 8002194:	211a      	movs	r1, #26
 8002196:	187b      	adds	r3, r7, r1
 8002198:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	187a      	adds	r2, r7, r1
 80021a4:	8812      	ldrh	r2, [r2, #0]
 80021a6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	18d2      	adds	r2, r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	7812      	ldrb	r2, [r2, #0]
 80021b8:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b008      	add	sp, #32
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e013      	b.n	8002202 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	18d3      	adds	r3, r2, r3
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	18cb      	adds	r3, r1, r3
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	0019      	movs	r1, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	d3e6      	bcc.n	80021da <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d009      	beq.n	8002228 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	18d3      	adds	r3, r2, r3
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b006      	add	sp, #24
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	60f8      	str	r0, [r7, #12]
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002242:	2317      	movs	r3, #23
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800224a:	231f      	movs	r3, #31
 800224c:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1e5a      	subs	r2, r3, #1
 8002254:	613a      	str	r2, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_CRCEx_Polynomial_Set+0x36>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	221f      	movs	r2, #31
 800225e:	4013      	ands	r3, r2
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	40da      	lsrs	r2, r3
 8002264:	0013      	movs	r3, r2
 8002266:	2201      	movs	r2, #1
 8002268:	4013      	ands	r3, r2
 800226a:	d0f1      	beq.n	8002250 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b18      	cmp	r3, #24
 8002270:	d00f      	beq.n	8002292 <HAL_CRCEx_Polynomial_Set+0x5c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b18      	cmp	r3, #24
 8002276:	d824      	bhi.n	80022c2 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d011      	beq.n	80022a2 <HAL_CRCEx_Polynomial_Set+0x6c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b10      	cmp	r3, #16
 8002282:	d81e      	bhi.n	80022c2 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_CRCEx_Polynomial_Set+0x96>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d010      	beq.n	80022b2 <HAL_CRCEx_Polynomial_Set+0x7c>
 8002290:	e017      	b.n	80022c2 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d91b      	bls.n	80022d0 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8002298:	2317      	movs	r3, #23
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022a0:	e016      	b.n	80022d0 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d915      	bls.n	80022d4 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80022a8:	2317      	movs	r3, #23
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022b0:	e010      	b.n	80022d4 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d90f      	bls.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80022b8:	2317      	movs	r3, #23
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
      }
      break;
 80022c0:	e00a      	b.n	80022d8 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80022c2:	2317      	movs	r3, #23
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
      break;
 80022ca:	e006      	b.n	80022da <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	e004      	b.n	80022da <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	e002      	b.n	80022da <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	e000      	b.n	80022da <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 80022d8:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 80022da:	2317      	movs	r3, #23
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10e      	bne.n	8002302 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2218      	movs	r2, #24
 80022f4:	4393      	bics	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002302:	2317      	movs	r3, #23
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	781b      	ldrb	r3, [r3, #0]
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b006      	add	sp, #24
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603a      	str	r2, [r7, #0]
 800231c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_FLASH_Program+0x94>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_FLASH_Program+0x1a>
 8002326:	2302      	movs	r3, #2
 8002328:	e038      	b.n	800239c <HAL_FLASH_Program+0x8c>
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_FLASH_Program+0x94>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_FLASH_Program+0x94>)
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002336:	2517      	movs	r5, #23
 8002338:	197c      	adds	r4, r7, r5
 800233a:	23fa      	movs	r3, #250	; 0xfa
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f8ac 	bl	800249c <FLASH_WaitForLastOperation>
 8002344:	0003      	movs	r3, r0
 8002346:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002348:	197b      	adds	r3, r7, r5
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d11f      	bne.n	8002390 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d106      	bne.n	8002364 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	0008      	movs	r0, r1
 800235e:	f000 f8eb 	bl	8002538 <FLASH_Program_DoubleWord>
 8002362:	e005      	b.n	8002370 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f002 fc40 	bl	8004bf0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002370:	2317      	movs	r3, #23
 8002372:	18fc      	adds	r4, r7, r3
 8002374:	23fa      	movs	r3, #250	; 0xfa
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f88f 	bl	800249c <FLASH_WaitForLastOperation>
 800237e:	0003      	movs	r3, r0
 8002380:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_FLASH_Program+0x98>)
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43d9      	mvns	r1, r3
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_FLASH_Program+0x98>)
 800238c:	400a      	ands	r2, r1
 800238e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_FLASH_Program+0x94>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002396:	2317      	movs	r3, #23
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	781b      	ldrb	r3, [r3, #0]
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b006      	add	sp, #24
 80023a2:	bdb0      	pop	{r4, r5, r7, pc}
 80023a4:	200005c0 	.word	0x200005c0
 80023a8:	40022000 	.word	0x40022000

080023ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_FLASH_Unlock+0x3c>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da0c      	bge.n	80023da <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_FLASH_Unlock+0x3c>)
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_FLASH_Unlock+0x40>)
 80023c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_FLASH_Unlock+0x3c>)
 80023c8:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_FLASH_Unlock+0x44>)
 80023ca:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_FLASH_Unlock+0x3c>)
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da02      	bge.n	80023da <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	40022000 	.word	0x40022000
 80023ec:	45670123 	.word	0x45670123
 80023f0:	cdef89ab 	.word	0xcdef89ab

080023f4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_FLASH_Lock+0x34>)
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_FLASH_Lock+0x34>)
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0609      	lsls	r1, r1, #24
 800240a:	430a      	orrs	r2, r1
 800240c:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_FLASH_Lock+0x34>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	da02      	bge.n	800241c <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	781b      	ldrb	r3, [r3, #0]
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40022000 	.word	0x40022000

0800242c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_FLASH_OB_Unlock+0x44>)
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	05db      	lsls	r3, r3, #23
 8002440:	4013      	ands	r3, r2
 8002442:	d00e      	beq.n	8002462 <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_FLASH_OB_Unlock+0x44>)
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <HAL_FLASH_OB_Unlock+0x48>)
 8002448:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_FLASH_OB_Unlock+0x44>)
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_FLASH_OB_Unlock+0x4c>)
 800244e:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_FLASH_OB_Unlock+0x44>)
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	05db      	lsls	r3, r3, #23
 8002458:	4013      	ands	r3, r2
 800245a:	d102      	bne.n	8002462 <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	781b      	ldrb	r3, [r3, #0]
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b002      	add	sp, #8
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	40022000 	.word	0x40022000
 8002474:	08192a3b 	.word	0x08192a3b
 8002478:	4c5d6e7f 	.word	0x4c5d6e7f

0800247c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_FLASH_OB_Launch+0x1c>)
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_FLASH_OB_Launch+0x1c>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0509      	lsls	r1, r1, #20
 800248a:	430a      	orrs	r2, r1
 800248c:	615a      	str	r2, [r3, #20]

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	40022000 	.word	0x40022000

0800249c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80024a4:	f7ff fc68 	bl	8001d78 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	189b      	adds	r3, r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	025b      	lsls	r3, r3, #9
 80024b4:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80024b6:	e007      	b.n	80024c8 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80024b8:	f7ff fc5e 	bl	8001d78 <HAL_GetTick>
 80024bc:	0002      	movs	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d801      	bhi.n	80024c8 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e02a      	b.n	800251e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <FLASH_WaitForLastOperation+0x8c>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	d1f2      	bne.n	80024b8 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <FLASH_WaitForLastOperation+0x8c>)
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	4a15      	ldr	r2, [pc, #84]	; (800252c <FLASH_WaitForLastOperation+0x90>)
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <FLASH_WaitForLastOperation+0x8c>)
 80024de:	4a14      	ldr	r2, [pc, #80]	; (8002530 <FLASH_WaitForLastOperation+0x94>)
 80024e0:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <FLASH_WaitForLastOperation+0x98>)
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e015      	b.n	800251e <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80024f2:	f7ff fc41 	bl	8001d78 <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	189b      	adds	r3, r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80024fe:	e007      	b.n	8002510 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8002500:	f7ff fc3a 	bl	8001d78 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4293      	cmp	r3, r2
 800250a:	d801      	bhi.n	8002510 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e006      	b.n	800251e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <FLASH_WaitForLastOperation+0x8c>)
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	02db      	lsls	r3, r3, #11
 8002518:	4013      	ands	r3, r2
 800251a:	d1f1      	bne.n	8002500 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	40022000 	.word	0x40022000
 800252c:	0000c3fa 	.word	0x0000c3fa
 8002530:	0000c3fb 	.word	0x0000c3fb
 8002534:	200005c0 	.word	0x200005c0

08002538 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	603a      	str	r2, [r7, #0]
 8002542:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <FLASH_Program_DoubleWord+0x3c>)
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <FLASH_Program_DoubleWord+0x3c>)
 800254a:	2101      	movs	r1, #1
 800254c:	430a      	orrs	r2, r1
 800254e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002556:	f3bf 8f6f 	isb	sy
}
 800255a:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	001c      	movs	r4, r3
 8002560:	2300      	movs	r3, #0
 8002562:	001d      	movs	r5, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3304      	adds	r3, #4
 8002568:	0022      	movs	r2, r4
 800256a:	601a      	str	r2, [r3, #0]
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b004      	add	sp, #16
 8002572:	bdb0      	pop	{r4, r5, r7, pc}
 8002574:	40022000 	.word	0x40022000

08002578 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002582:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_FLASHEx_Erase+0xe0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_FLASHEx_Erase+0x16>
 800258a:	2302      	movs	r3, #2
 800258c:	e05f      	b.n	800264e <HAL_FLASHEx_Erase+0xd6>
 800258e:	4b32      	ldr	r3, [pc, #200]	; (8002658 <HAL_FLASHEx_Erase+0xe0>)
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <HAL_FLASHEx_Erase+0xe0>)
 8002596:	2200      	movs	r2, #0
 8002598:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800259a:	250f      	movs	r5, #15
 800259c:	197c      	adds	r4, r7, r5
 800259e:	23fa      	movs	r3, #250	; 0xfa
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff ff7a 	bl	800249c <FLASH_WaitForLastOperation>
 80025a8:	0003      	movs	r3, r0
 80025aa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80025ac:	002c      	movs	r4, r5
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d145      	bne.n	8002642 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2204      	movs	r2, #4
 80025ba:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d10d      	bne.n	80025e0 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 f943 	bl	8002854 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025ce:	193c      	adds	r4, r7, r4
 80025d0:	23fa      	movs	r3, #250	; 0xfa
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7ff ff61 	bl	800249c <FLASH_WaitForLastOperation>
 80025da:	0003      	movs	r3, r0
 80025dc:	7023      	strb	r3, [r4, #0]
 80025de:	e030      	b.n	8002642 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4252      	negs	r2, r2
 80025e6:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	e01a      	b.n	8002626 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f93f 	bl	800287c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025fe:	250f      	movs	r5, #15
 8002600:	197c      	adds	r4, r7, r5
 8002602:	23fa      	movs	r3, #250	; 0xfa
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff ff48 	bl	800249c <FLASH_WaitForLastOperation>
 800260c:	0003      	movs	r3, r0
 800260e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8002610:	197b      	adds	r3, r7, r5
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	601a      	str	r2, [r3, #0]
          break;
 800261e:	e00a      	b.n	8002636 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3301      	adds	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	18d3      	adds	r3, r2, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d3dc      	bcc.n	80025f0 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_FLASHEx_Erase+0xe4>)
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_FLASHEx_Erase+0xe4>)
 800263c:	2102      	movs	r1, #2
 800263e:	438a      	bics	r2, r1
 8002640:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_FLASHEx_Erase+0xe0>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002648:	230f      	movs	r3, #15
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	781b      	ldrb	r3, [r3, #0]
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b004      	add	sp, #16
 8002654:	bdb0      	pop	{r4, r5, r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	200005c0 	.word	0x200005c0
 800265c:	40022000 	.word	0x40022000

08002660 <HAL_FLASHEx_OBProgram>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002668:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <HAL_FLASHEx_OBProgram+0x154>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_FLASHEx_OBProgram+0x14>
 8002670:	2302      	movs	r3, #2
 8002672:	e09b      	b.n	80027ac <HAL_FLASHEx_OBProgram+0x14c>
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <HAL_FLASHEx_OBProgram+0x154>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800267a:	4b4e      	ldr	r3, [pc, #312]	; (80027b4 <HAL_FLASHEx_OBProgram+0x154>)
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	4013      	ands	r3, r2
 8002688:	d008      	beq.n	800269c <HAL_FLASHEx_OBProgram+0x3c>
  {
    /* Configure of Write protection on the selected area */
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6858      	ldr	r0, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	001a      	movs	r2, r3
 8002698:	f000 f90c 	bl	80028b4 <FLASH_OB_WRPConfig>
  }

  /* Option register */
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2206      	movs	r2, #6
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d109      	bne.n	80026bc <HAL_FLASHEx_OBProgram+0x5c>
  {
    /* Fully modify OPTR register with RDP & user data */
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, pOBInit->RDPLevel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6958      	ldr	r0, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6999      	ldr	r1, [r3, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	001a      	movs	r2, r3
 80026b6:	f000 f943 	bl	8002940 <FLASH_OB_OptrConfig>
 80026ba:	e021      	b.n	8002700 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2202      	movs	r2, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d00b      	beq.n	80026de <HAL_FLASHEx_OBProgram+0x7e>
  {
    /* Only modify RDP so get current user data */
    optr = FLASH_OB_GetUser();
 80026c6:	f000 f971 	bl	80029ac <FLASH_OB_GetUser>
 80026ca:	0003      	movs	r3, r0
 80026cc:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f932 	bl	8002940 <FLASH_OB_OptrConfig>
 80026dc:	e010      	b.n	8002700 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2204      	movs	r2, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00b      	beq.n	8002700 <HAL_FLASHEx_OBProgram+0xa0>
  {
    /* Only modify user so get current RDP level */
    optr = FLASH_OB_GetRDP();
 80026e8:	f000 f948 	bl	800297c <FLASH_OB_GetRDP>
 80026ec:	0003      	movs	r3, r0
 80026ee:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, optr);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6958      	ldr	r0, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	0019      	movs	r1, r3
 80026fc:	f000 f920 	bl	8002940 <FLASH_OB_OptrConfig>
    /* nothing to do */
  }

#if defined(FLASH_PCROP_SUPPORT)
  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2208      	movs	r2, #8
 8002706:	4013      	ands	r3, r2
 8002708:	d01a      	beq.n	8002740 <HAL_FLASHEx_OBProgram+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_OB_PCROP_CONFIG(pOBInit->PCROPConfig));

    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0x00U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_FLASHEx_OBProgram+0x158>)
 8002710:	4013      	ands	r3, r2
 8002712:	d008      	beq.n	8002726 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the 1A Proprietary code readout protection */
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69d8      	ldr	r0, [r3, #28]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a19      	ldr	r1, [r3, #32]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	001a      	movs	r2, r3
 8002722:	f000 f955 	bl	80029d0 <FLASH_OB_PCROP1AConfig>
    }

    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0x00U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d007      	beq.n	8002740 <HAL_FLASHEx_OBProgram+0xe0>
    {
      /* Configure the 1B Proprietary code readout protection */
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	0019      	movs	r1, r3
 800273a:	0010      	movs	r0, r2
 800273c:	f000 f97e 	bl	8002a3c <FLASH_OB_PCROP1BConfig>
  }
#endif /* FLASH_PCROP_SUPPORT */

#if defined(FLASH_SECURABLE_MEMORY_SUPPORT)
  /* Securable Memory Area Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0x00U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	4013      	ands	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_FLASHEx_OBProgram+0xfa>
#if defined(FLASH_DBANK_SUPPORT)
    /* Configure the securable memory area protection */
    FLASH_OB_SecMemConfig(pOBInit->BootEntryPoint, pOBInit->SecSize, pOBInit->SecSize2);
#else
    /* Configure the securable memory area protection */
    FLASH_OB_SecMemConfig(pOBInit->BootEntryPoint, pOBInit->SecSize);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	0019      	movs	r1, r3
 8002754:	0010      	movs	r0, r2
 8002756:	f000 f9ff 	bl	8002b58 <FLASH_OB_SecMemConfig>
#endif /* FLASH_DBANK_SUPPORT */
  }
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800275a:	250f      	movs	r5, #15
 800275c:	197c      	adds	r4, r7, r5
 800275e:	23fa      	movs	r3, #250	; 0xfa
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	0018      	movs	r0, r3
 8002764:	f7ff fe9a 	bl	800249c <FLASH_WaitForLastOperation>
 8002768:	0003      	movs	r3, r0
 800276a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800276c:	0028      	movs	r0, r5
 800276e:	183b      	adds	r3, r7, r0
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d114      	bne.n	80027a0 <HAL_FLASHEx_OBProgram+0x140>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_FLASHEx_OBProgram+0x15c>)
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_FLASHEx_OBProgram+0x15c>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0289      	lsls	r1, r1, #10
 8002780:	430a      	orrs	r2, r1
 8002782:	615a      	str	r2, [r3, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002784:	183c      	adds	r4, r7, r0
 8002786:	23fa      	movs	r3, #250	; 0xfa
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff fe86 	bl	800249c <FLASH_WaitForLastOperation>
 8002790:	0003      	movs	r3, r0
 8002792:	7023      	strb	r3, [r4, #0]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_FLASHEx_OBProgram+0x15c>)
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_FLASHEx_OBProgram+0x15c>)
 800279a:	4909      	ldr	r1, [pc, #36]	; (80027c0 <HAL_FLASHEx_OBProgram+0x160>)
 800279c:	400a      	ands	r2, r1
 800279e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <HAL_FLASHEx_OBProgram+0x154>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80027a6:	230f      	movs	r3, #15
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	781b      	ldrb	r3, [r3, #0]
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b004      	add	sp, #16
 80027b2:	bdb0      	pop	{r4, r5, r7, pc}
 80027b4:	200005c0 	.word	0x200005c0
 80027b8:	80000001 	.word	0x80000001
 80027bc:	40022000 	.word	0x40022000
 80027c0:	fffdffff 	.word	0xfffdffff

080027c4 <HAL_FLASHEx_OBGetConfig>:
  *                  configuration information. The fields pOBInit->WRPArea should
  *                  indicate which area is requested for the WRP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	221f      	movs	r2, #31
 80027d0:	601a      	str	r2, [r3, #0]

  /* Get write protection on the selected area */
  FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6858      	ldr	r0, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3308      	adds	r3, #8
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	330c      	adds	r3, #12
 80027e0:	001a      	movs	r2, r3
 80027e2:	f000 f883 	bl	80028ec <FLASH_OB_GetWRP>

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80027e6:	f000 f8c9 	bl	800297c <FLASH_OB_GetRDP>
 80027ea:	0002      	movs	r2, r0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80027f0:	f000 f8dc 	bl	80029ac <FLASH_OB_GetUser>
 80027f4:	0002      	movs	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
  pOBInit->USERType = OB_USER_ALL;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_FLASHEx_OBGetConfig+0x8c>)
 80027fe:	615a      	str	r2, [r3, #20]

#if defined(FLASH_PCROP_SUPPORT)
  /* Get the Proprietary code readout protection */
  FLASH_OB_GetPCROP1A(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	331c      	adds	r3, #28
 8002804:	0018      	movs	r0, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3320      	adds	r3, #32
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3324      	adds	r3, #36	; 0x24
 8002810:	001a      	movs	r2, r3
 8002812:	f000 f931 	bl	8002a78 <FLASH_OB_GetPCROP1A>
  FLASH_OB_GetPCROP1B(&(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3328      	adds	r3, #40	; 0x28
 800281a:	001a      	movs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	332c      	adds	r3, #44	; 0x2c
 8002820:	0019      	movs	r1, r3
 8002822:	0010      	movs	r0, r2
 8002824:	f000 f968 	bl	8002af8 <FLASH_OB_GetPCROP1B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2203      	movs	r2, #3
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	61da      	str	r2, [r3, #28]
#if defined(FLASH_DBANK_SUPPORT)
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize), &(pOBInit->SecSize2));
#else
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3330      	adds	r3, #48	; 0x30
 8002838:	001a      	movs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3334      	adds	r3, #52	; 0x34
 800283e:	0019      	movs	r1, r3
 8002840:	0010      	movs	r0, r2
 8002842:	f000 f9a5 	bl	8002b90 <FLASH_OB_GetSecMem>
#endif /* FLASH_DBANK_SUPPORT */
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b002      	add	sp, #8
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	3f4fff00 	.word	0x3f4fff00

08002854 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <FLASH_MassErase+0x24>)
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	431a      	orrs	r2, r3
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <FLASH_MassErase+0x24>)
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	0249      	lsls	r1, r1, #9
 800286a:	430a      	orrs	r2, r1
 800286c:	615a      	str	r2, [r3, #20]
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	40022000 	.word	0x40022000

0800287c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <FLASH_PageErase+0x2c>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <FLASH_PageErase+0x30>)
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	00da      	lsls	r2, r3, #3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	431a      	orrs	r2, r3
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <FLASH_PageErase+0x2c>)
 800289a:	4905      	ldr	r1, [pc, #20]	; (80028b0 <FLASH_PageErase+0x34>)
 800289c:	430a      	orrs	r2, r1
 800289e:	615a      	str	r2, [r3, #20]
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b004      	add	sp, #16
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40022000 	.word	0x40022000
 80028ac:	ffffe007 	.word	0xffffe007
 80028b0:	00010002 	.word	0x00010002

080028b4 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset  Specifies the end page of the write protected area
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the Flash Bank - 1)
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d106      	bne.n	80028d4 <FLASH_OB_WRPConfig+0x20>
  {
    FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0419      	lsls	r1, r3, #16
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <FLASH_OB_WRPConfig+0x34>)
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* FLASH_DBANK_SUPPORT */
  else
  {
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
  }
}
 80028d2:	e005      	b.n	80028e0 <FLASH_OB_WRPConfig+0x2c>
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0419      	lsls	r1, r3, #16
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <FLASH_OB_WRPConfig+0x34>)
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	430a      	orrs	r2, r1
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b004      	add	sp, #16
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40022000 	.word	0x40022000

080028ec <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset  Dpecifies the address where to copied the end page of
  *                        the write protected area
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d10d      	bne.n	800291a <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <FLASH_OB_GetWRP+0x50>)
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	223f      	movs	r2, #63	; 0x3f
 8002904:	401a      	ands	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <FLASH_OB_GetWRP+0x50>)
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	0c1b      	lsrs	r3, r3, #16
 8002910:	223f      	movs	r2, #63	; 0x3f
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
  }
}
 8002918:	e00c      	b.n	8002934 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <FLASH_OB_GetWRP+0x50>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	223f      	movs	r2, #63	; 0x3f
 8002920:	401a      	ands	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <FLASH_OB_GetWRP+0x50>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	0c1b      	lsrs	r3, r3, #16
 800292c:	223f      	movs	r2, #63	; 0x3f
 800292e:	401a      	ands	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	601a      	str	r2, [r3, #0]
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40022000 	.word	0x40022000

08002940 <FLASH_OB_OptrConfig>:
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @note  (*) availability depends on devices
  * @retval None
  */
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <FLASH_OB_OptrConfig+0x38>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	617b      	str	r3, [r7, #20]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	22ff      	movs	r2, #255	; 0xff
 8002956:	4313      	orrs	r3, r2
 8002958:	43da      	mvns	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	431a      	orrs	r2, r3
 8002966:	0011      	movs	r1, r2
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <FLASH_OB_OptrConfig+0x38>)
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	430a      	orrs	r2, r1
 800296e:	621a      	str	r2, [r3, #32]
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b006      	add	sp, #24
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40022000 	.word	0x40022000

0800297c <FLASH_OB_GetRDP>:
  *           @arg @ref OB_RDP_LEVEL_0 No protection
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <FLASH_OB_GetRDP+0x2c>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	22ff      	movs	r2, #255	; 0xff
 8002988:	4013      	ands	r3, r2
 800298a:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2baa      	cmp	r3, #170	; 0xaa
 8002990:	d004      	beq.n	800299c <FLASH_OB_GetRDP+0x20>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2bcc      	cmp	r3, #204	; 0xcc
 8002996:	d001      	beq.n	800299c <FLASH_OB_GetRDP+0x20>
  {
    return (OB_RDP_LEVEL_1);
 8002998:	23bb      	movs	r3, #187	; 0xbb
 800299a:	e000      	b.n	800299e <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    return rdplvl;
 800299c:	687b      	ldr	r3, [r7, #4]
  }
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b002      	add	sp, #8
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	40022000 	.word	0x40022000

080029ac <FLASH_OB_GetUser>:
  *           @arg @ref FLASH_OB_USER_nBOOT0
  *           @arg @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <FLASH_OB_GetUser+0x1c>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <FLASH_OB_GetUser+0x20>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	607b      	str	r3, [r7, #4]
  return user;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40022000 	.word	0x40022000
 80029cc:	3f4fff00 	.word	0x3f4fff00

080029d0 <FLASH_OB_PCROP1AConfig>:
  * @param  PCROP1AEndAddr Specifies the Zone 1A end address of the Proprietary code readout protection
  *          This parameter can be an address between PCROP1AStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1AConfig(uint32_t PCROPConfig, uint32_t PCROP1AStartAddr, uint32_t PCROP1AEndAddr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1AStartAddr));
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1AEndAddr));

    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	051b      	lsls	r3, r3, #20
 80029e0:	61bb      	str	r3, [r7, #24]
  }

  /* get pcrop 1A end register */
  pcrop1aend = FLASH->PCROP1AER;
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <FLASH_OB_PCROP1AConfig+0x68>)
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	61fb      	str	r3, [r7, #28]

  /* Configure the Proprietary code readout protection offset */
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0x00U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	4013      	ands	r3, r2
 80029ee:	d014      	beq.n	8002a1a <FLASH_OB_PCROP1AConfig+0x4a>
  {
    /* Compute offset depending on pcrop granularity */
    startoffset = ((PCROP1AStartAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	0a5b      	lsrs	r3, r3, #9
 80029f8:	617b      	str	r3, [r7, #20]
    endoffset = ((PCROP1AEndAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	0a5b      	lsrs	r3, r3, #9
 8002a02:	613b      	str	r3, [r7, #16]

    /* Set Zone A start offset */
    FLASH->PCROP1ASR = startoffset;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <FLASH_OB_PCROP1AConfig+0x68>)
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Zone A end offset */
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	4393      	bics	r3, r2
 8002a10:	61fb      	str	r3, [r7, #28]
    pcrop1aend |= endoffset;
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61fb      	str	r3, [r7, #28]
  }

  /* Set RDP erase protection if needed. This bit is only set & will be reset by mass erase */
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0x00U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	da04      	bge.n	8002a2a <FLASH_OB_PCROP1AConfig+0x5a>
  {
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	0612      	lsls	r2, r2, #24
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61fb      	str	r3, [r7, #28]
  }

  /* set 1A End register */
  FLASH->PCROP1AER = pcrop1aend;
 8002a2a:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <FLASH_OB_PCROP1AConfig+0x68>)
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b008      	add	sp, #32
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40022000 	.word	0x40022000

08002a3c <FLASH_OB_PCROP1BConfig>:
  * @param  PCROP1BEndAddr  Specifies the Zone 1B end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP1BStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1BConfig(uint32_t PCROP1BStartAddr, uint32_t PCROP1BEndAddr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1BStartAddr));
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1BEndAddr));

    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	051b      	lsls	r3, r3, #20
 8002a4a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the Proprietary code readout protection offset */
  startoffset = ((PCROP1BStartAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	0a5b      	lsrs	r3, r3, #9
 8002a54:	613b      	str	r3, [r7, #16]
  endoffset = ((PCROP1BEndAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	0a5b      	lsrs	r3, r3, #9
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set Zone B start offset */
  FLASH->PCROP1BSR = startoffset;
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <FLASH_OB_PCROP1BConfig+0x38>)
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
  /* Set Zone B end offset */
  FLASH->PCROP1BER = endoffset;
 8002a66:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <FLASH_OB_PCROP1BConfig+0x38>)
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b006      	add	sp, #24
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40022000 	.word	0x40022000

08002a78 <FLASH_OB_GetPCROP1A>:
  * @param  PCROP1AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	617b      	str	r3, [r7, #20]
  }

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <FLASH_OB_GetPCROP1A+0x78>)
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	025a      	lsls	r2, r3, #9
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	601a      	str	r2, [r3, #0]
  *PCROP1AStartAddr += ropbase;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	18d2      	adds	r2, r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	601a      	str	r2, [r3, #0]

  pcrop = FLASH->PCROP1AER;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <FLASH_OB_GetPCROP1A+0x78>)
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	613b      	str	r3, [r7, #16]
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	025a      	lsls	r2, r3, #9
 8002ab2:	23ff      	movs	r3, #255	; 0xff
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	601a      	str	r2, [r3, #0]
  *PCROP1AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <FLASH_OB_GetPCROP1A+0x7c>)
 8002ac6:	189a      	adds	r2, r3, r2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]

  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	085a      	lsrs	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	601a      	str	r2, [r3, #0]
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	0fdb      	lsrs	r3, r3, #31
 8002ae0:	07db      	lsls	r3, r3, #31
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b006      	add	sp, #24
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40022000 	.word	0x40022000
 8002af4:	000001ff 	.word	0x000001ff

08002af8 <FLASH_OB_GetPCROP1B>:
  * @param  PCROP1BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	051b      	lsls	r3, r3, #20
 8002b06:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <FLASH_OB_GetPCROP1B+0x58>)
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60bb      	str	r3, [r7, #8]
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	025a      	lsls	r2, r3, #9
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
  *PCROP1BStartAddr += ropbase;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	18d2      	adds	r2, r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <FLASH_OB_GetPCROP1B+0x58>)
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	22ff      	movs	r2, #255	; 0xff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	025a      	lsls	r2, r3, #9
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	601a      	str	r2, [r3, #0]
  *PCROP1BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	18d3      	adds	r3, r2, r3
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <FLASH_OB_GetPCROP1B+0x5c>)
 8002b42:	189a      	adds	r2, r3, r2
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	601a      	str	r2, [r3, #0]
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40022000 	.word	0x40022000
 8002b54:	000001ff 	.word	0x000001ff

08002b58 <FLASH_OB_SecMemConfig>:
  * @param  SecSize specifies number of pages to protect as securable memory area, starting from
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_SecMemConfig(uint32_t BootEntry, uint32_t SecSize)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_SEC_BOOT_LOCK(BootEntry));
  assert_param(IS_OB_SEC_SIZE(SecSize));

  /* Set securable memory area configuration */
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_SEC_SIZE));
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <FLASH_OB_SecMemConfig+0x30>)
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	58d3      	ldr	r3, [r2, r3]
 8002b68:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <FLASH_OB_SecMemConfig+0x34>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  FLASH->SECR = (secmem | BootEntry | SecSize);
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	4904      	ldr	r1, [pc, #16]	; (8002b88 <FLASH_OB_SecMemConfig+0x30>)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	508b      	str	r3, [r1, r2]
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	fffeff80 	.word	0xfffeff80

08002b90 <FLASH_OB_GetSecMem>:
  * @param  SecSize specifies number of pages to protect as secure memory area, starting from
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t secmem = FLASH->SECR;
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <FLASH_OB_GetSecMem+0x30>)
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	58d3      	ldr	r3, [r2, r3]
 8002ba0:	60fb      	str	r3, [r7, #12]

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	025b      	lsls	r3, r3, #9
 8002ba8:	401a      	ands	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	601a      	str	r2, [r3, #0]
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	227f      	movs	r2, #127	; 0x7f
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	601a      	str	r2, [r3, #0]
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b004      	add	sp, #16
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd2:	e147      	b.n	8002e64 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4091      	lsls	r1, r2
 8002bde:	000a      	movs	r2, r1
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d100      	bne.n	8002bec <HAL_GPIO_Init+0x28>
 8002bea:	e138      	b.n	8002e5e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d005      	beq.n	8002c04 <HAL_GPIO_Init+0x40>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d130      	bne.n	8002c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	409a      	lsls	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	43da      	mvns	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	409a      	lsls	r2, r3
 8002c26:	0013      	movs	r3, r2
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	43da      	mvns	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	2201      	movs	r2, #1
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d017      	beq.n	8002ca2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	43da      	mvns	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	409a      	lsls	r2, r3
 8002c94:	0013      	movs	r3, r2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d123      	bne.n	8002cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	58d3      	ldr	r3, [r2, r3]
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	0013      	movs	r3, r2
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2107      	movs	r1, #7
 8002cda:	400b      	ands	r3, r1
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	08da      	lsrs	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3208      	adds	r2, #8
 8002cf0:	0092      	lsls	r2, r2, #2
 8002cf2:	6939      	ldr	r1, [r7, #16]
 8002cf4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	409a      	lsls	r2, r3
 8002d04:	0013      	movs	r3, r2
 8002d06:	43da      	mvns	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2203      	movs	r2, #3
 8002d14:	401a      	ands	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	0013      	movs	r3, r2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	029b      	lsls	r3, r3, #10
 8002d32:	4013      	ands	r3, r2
 8002d34:	d100      	bne.n	8002d38 <HAL_GPIO_Init+0x174>
 8002d36:	e092      	b.n	8002e5e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002d38:	4a50      	ldr	r2, [pc, #320]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3318      	adds	r3, #24
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	589b      	ldr	r3, [r3, r2]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	220f      	movs	r2, #15
 8002d50:	409a      	lsls	r2, r3
 8002d52:	0013      	movs	r3, r2
 8002d54:	43da      	mvns	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	23a0      	movs	r3, #160	; 0xa0
 8002d60:	05db      	lsls	r3, r3, #23
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x1ca>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a45      	ldr	r2, [pc, #276]	; (8002e80 <HAL_GPIO_Init+0x2bc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x1c6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a44      	ldr	r2, [pc, #272]	; (8002e84 <HAL_GPIO_Init+0x2c0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x1c2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a43      	ldr	r2, [pc, #268]	; (8002e88 <HAL_GPIO_Init+0x2c4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x1be>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x1cc>
 8002d82:	2305      	movs	r3, #5
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x1cc>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x1cc>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x1cc>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	2103      	movs	r1, #3
 8002d94:	400a      	ands	r2, r1
 8002d96:	00d2      	lsls	r2, r2, #3
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002da0:	4936      	ldr	r1, [pc, #216]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3318      	adds	r3, #24
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43da      	mvns	r2, r3
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	035b      	lsls	r3, r3, #13
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43da      	mvns	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	039b      	lsls	r3, r3, #14
 8002df0:	4013      	ands	r3, r2
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e02:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002e04:	2384      	movs	r3, #132	; 0x84
 8002e06:	58d3      	ldr	r3, [r2, r3]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	029b      	lsls	r3, r3, #10
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e28:	4914      	ldr	r1, [pc, #80]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002e2a:	2284      	movs	r2, #132	; 0x84
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e30:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	58d3      	ldr	r3, [r2, r3]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	025b      	lsls	r3, r3, #9
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e56:	4909      	ldr	r1, [pc, #36]	; (8002e7c <HAL_GPIO_Init+0x2b8>)
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	40da      	lsrs	r2, r3
 8002e6c:	1e13      	subs	r3, r2, #0
 8002e6e:	d000      	beq.n	8002e72 <HAL_GPIO_Init+0x2ae>
 8002e70:	e6b0      	b.n	8002bd4 <HAL_GPIO_Init+0x10>
  }
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b006      	add	sp, #24
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021800 	.word	0x40021800
 8002e80:	50000400 	.word	0x50000400
 8002e84:	50000800 	.word	0x50000800
 8002e88:	50000c00 	.word	0x50000c00

08002e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	000a      	movs	r2, r1
 8002e96:	1cbb      	adds	r3, r7, #2
 8002e98:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	1cba      	adds	r2, r7, #2
 8002ea0:	8812      	ldrh	r2, [r2, #0]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002ea6:	230f      	movs	r3, #15
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e003      	b.n	8002eb8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002eb8:	230f      	movs	r3, #15
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	781b      	ldrb	r3, [r3, #0]
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	0008      	movs	r0, r1
 8002ed0:	0011      	movs	r1, r2
 8002ed2:	1cbb      	adds	r3, r7, #2
 8002ed4:	1c02      	adds	r2, r0, #0
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	1c7b      	adds	r3, r7, #1
 8002eda:	1c0a      	adds	r2, r1, #0
 8002edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ede:	1c7b      	adds	r3, r7, #1
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ee6:	1cbb      	adds	r3, r7, #2
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eee:	e003      	b.n	8002ef8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ef0:	1cbb      	adds	r3, r7, #2
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b002      	add	sp, #8
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d11f      	bne.n	8002f64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	0013      	movs	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	189b      	adds	r3, r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4912      	ldr	r1, [pc, #72]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7fd f8e8 	bl	8000108 <__udivsi3>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f3e:	e008      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e001      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e009      	b.n	8002f66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d0ed      	beq.n	8002f40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b004      	add	sp, #16
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	40007000 	.word	0x40007000
 8002f74:	fffff9ff 	.word	0xfffff9ff
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	000f4240 	.word	0x000f4240

08002f80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	23e0      	movs	r3, #224	; 0xe0
 8002f8a:	01db      	lsls	r3, r3, #7
 8002f8c:	4013      	ands	r3, r2
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e2fe      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x1e>
 8002fb4:	e07c      	b.n	80030b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4bc3      	ldr	r3, [pc, #780]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2238      	movs	r2, #56	; 0x38
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc0:	4bc0      	ldr	r3, [pc, #768]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3e>
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d002      	beq.n	8002fdc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	4bb9      	ldr	r3, [pc, #740]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	029b      	lsls	r3, r3, #10
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d062      	beq.n	80030ae <HAL_RCC_OscConfig+0x116>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d15e      	bne.n	80030ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e2d9      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	025b      	lsls	r3, r3, #9
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x78>
 8003000:	4bb0      	ldr	r3, [pc, #704]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4baf      	ldr	r3, [pc, #700]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	0249      	lsls	r1, r1, #9
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e020      	b.n	8003052 <HAL_RCC_OscConfig+0xba>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	23a0      	movs	r3, #160	; 0xa0
 8003016:	02db      	lsls	r3, r3, #11
 8003018:	429a      	cmp	r2, r3
 800301a:	d10e      	bne.n	800303a <HAL_RCC_OscConfig+0xa2>
 800301c:	4ba9      	ldr	r3, [pc, #676]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4ba8      	ldr	r3, [pc, #672]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	02c9      	lsls	r1, r1, #11
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	4ba6      	ldr	r3, [pc, #664]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4ba5      	ldr	r3, [pc, #660]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	0249      	lsls	r1, r1, #9
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0xba>
 800303a:	4ba2      	ldr	r3, [pc, #648]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4ba1      	ldr	r3, [pc, #644]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003040:	49a1      	ldr	r1, [pc, #644]	; (80032c8 <HAL_RCC_OscConfig+0x330>)
 8003042:	400a      	ands	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	4b9f      	ldr	r3, [pc, #636]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b9e      	ldr	r3, [pc, #632]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800304c:	499f      	ldr	r1, [pc, #636]	; (80032cc <HAL_RCC_OscConfig+0x334>)
 800304e:	400a      	ands	r2, r1
 8003050:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d014      	beq.n	8003084 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fe8d 	bl	8001d78 <HAL_GetTick>
 800305e:	0003      	movs	r3, r0
 8003060:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe fe88 	bl	8001d78 <HAL_GetTick>
 8003068:	0002      	movs	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e298      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003076:	4b93      	ldr	r3, [pc, #588]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	4013      	ands	r3, r2
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xcc>
 8003082:	e015      	b.n	80030b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fe78 	bl	8001d78 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800308e:	f7fe fe73 	bl	8001d78 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b64      	cmp	r3, #100	; 0x64
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e283      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030a0:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	4013      	ands	r3, r2
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0xf6>
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d100      	bne.n	80030bc <HAL_RCC_OscConfig+0x124>
 80030ba:	e099      	b.n	80031f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030bc:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2238      	movs	r2, #56	; 0x38
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030c6:	4b7f      	ldr	r3, [pc, #508]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2203      	movs	r2, #3
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d102      	bne.n	80030dc <HAL_RCC_OscConfig+0x144>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d002      	beq.n	80030e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d135      	bne.n	800314e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e2:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4013      	ands	r3, r2
 80030ec:	d005      	beq.n	80030fa <HAL_RCC_OscConfig+0x162>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e256      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b72      	ldr	r3, [pc, #456]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a74      	ldr	r2, [pc, #464]	; (80032d0 <HAL_RCC_OscConfig+0x338>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003116:	4b6b      	ldr	r3, [pc, #428]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6e      	ldr	r2, [pc, #440]	; (80032d4 <HAL_RCC_OscConfig+0x33c>)
 800311c:	4013      	ands	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800312a:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0adb      	lsrs	r3, r3, #11
 8003130:	2207      	movs	r2, #7
 8003132:	4013      	ands	r3, r2
 8003134:	4a68      	ldr	r2, [pc, #416]	; (80032d8 <HAL_RCC_OscConfig+0x340>)
 8003136:	40da      	lsrs	r2, r3
 8003138:	4b68      	ldr	r3, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x344>)
 800313a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800313c:	4b68      	ldr	r3, [pc, #416]	; (80032e0 <HAL_RCC_OscConfig+0x348>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0018      	movs	r0, r3
 8003142:	f7fe fdbd 	bl	8001cc0 <HAL_InitTick>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d051      	beq.n	80031ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e22c      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d030      	beq.n	80031b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5e      	ldr	r2, [pc, #376]	; (80032d4 <HAL_RCC_OscConfig+0x33c>)
 800315c:	4013      	ands	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b55      	ldr	r3, [pc, #340]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003170:	2180      	movs	r1, #128	; 0x80
 8003172:	0049      	lsls	r1, r1, #1
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fdfe 	bl	8001d78 <HAL_GetTick>
 800317c:	0003      	movs	r3, r0
 800317e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003182:	f7fe fdf9 	bl	8001d78 <HAL_GetTick>
 8003186:	0002      	movs	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e209      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4013      	ands	r3, r2
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a0:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x338>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	0019      	movs	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	021a      	lsls	r2, r3, #8
 80031b0:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	e01b      	b.n	80031f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80031be:	4949      	ldr	r1, [pc, #292]	; (80032e4 <HAL_RCC_OscConfig+0x34c>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fdd8 	bl	8001d78 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe fdd3 	bl	8001d78 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1e3      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e0:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4013      	ands	r3, r2
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x236>
 80031ec:	e000      	b.n	80031f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2208      	movs	r2, #8
 80031f6:	4013      	ands	r3, r2
 80031f8:	d047      	beq.n	800328a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031fa:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2238      	movs	r2, #56	; 0x38
 8003200:	4013      	ands	r3, r2
 8003202:	2b18      	cmp	r3, #24
 8003204:	d10a      	bne.n	800321c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003206:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	d03c      	beq.n	800328a <HAL_RCC_OscConfig+0x2f2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d138      	bne.n	800328a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e1c5      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d019      	beq.n	8003258 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003226:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003228:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800322a:	2101      	movs	r1, #1
 800322c:	430a      	orrs	r2, r1
 800322e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fda2 	bl	8001d78 <HAL_GetTick>
 8003234:	0003      	movs	r3, r0
 8003236:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe fd9d 	bl	8001d78 <HAL_GetTick>
 800323e:	0002      	movs	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1ad      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	2202      	movs	r2, #2
 8003252:	4013      	ands	r3, r2
 8003254:	d0f1      	beq.n	800323a <HAL_RCC_OscConfig+0x2a2>
 8003256:	e018      	b.n	800328a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800325a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fd88 	bl	8001d78 <HAL_GetTick>
 8003268:	0003      	movs	r3, r0
 800326a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe fd83 	bl	8001d78 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e193      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	2202      	movs	r2, #2
 8003286:	4013      	ands	r3, r2
 8003288:	d1f1      	bne.n	800326e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2204      	movs	r2, #4
 8003290:	4013      	ands	r3, r2
 8003292:	d100      	bne.n	8003296 <HAL_RCC_OscConfig+0x2fe>
 8003294:	e0c6      	b.n	8003424 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	231f      	movs	r3, #31
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2238      	movs	r2, #56	; 0x38
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d11e      	bne.n	80032e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x32c>)
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	2202      	movs	r2, #2
 80032b0:	4013      	ands	r3, r2
 80032b2:	d100      	bne.n	80032b6 <HAL_RCC_OscConfig+0x31e>
 80032b4:	e0b6      	b.n	8003424 <HAL_RCC_OscConfig+0x48c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d000      	beq.n	80032c0 <HAL_RCC_OscConfig+0x328>
 80032be:	e0b1      	b.n	8003424 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e171      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	fffeffff 	.word	0xfffeffff
 80032cc:	fffbffff 	.word	0xfffbffff
 80032d0:	ffff80ff 	.word	0xffff80ff
 80032d4:	ffffc7ff 	.word	0xffffc7ff
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000004 	.word	0x20000004
 80032e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032e8:	4bb1      	ldr	r3, [pc, #708]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80032ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	055b      	lsls	r3, r3, #21
 80032f0:	4013      	ands	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x360>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x362>
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d011      	beq.n	8003322 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	4bac      	ldr	r3, [pc, #688]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003302:	4bab      	ldr	r3, [pc, #684]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	0549      	lsls	r1, r1, #21
 8003308:	430a      	orrs	r2, r1
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
 800330c:	4ba8      	ldr	r3, [pc, #672]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	055b      	lsls	r3, r3, #21
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800331a:	231f      	movs	r3, #31
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	4ba4      	ldr	r3, [pc, #656]	; (80035b4 <HAL_RCC_OscConfig+0x61c>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4013      	ands	r3, r2
 800332c:	d11a      	bne.n	8003364 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800332e:	4ba1      	ldr	r3, [pc, #644]	; (80035b4 <HAL_RCC_OscConfig+0x61c>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4ba0      	ldr	r3, [pc, #640]	; (80035b4 <HAL_RCC_OscConfig+0x61c>)
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	0049      	lsls	r1, r1, #1
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800333c:	f7fe fd1c 	bl	8001d78 <HAL_GetTick>
 8003340:	0003      	movs	r3, r0
 8003342:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003346:	f7fe fd17 	bl	8001d78 <HAL_GetTick>
 800334a:	0002      	movs	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e127      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003358:	4b96      	ldr	r3, [pc, #600]	; (80035b4 <HAL_RCC_OscConfig+0x61c>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4013      	ands	r3, r2
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x3e2>
 800336c:	4b90      	ldr	r3, [pc, #576]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800336e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003370:	4b8f      	ldr	r3, [pc, #572]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003372:	2101      	movs	r1, #1
 8003374:	430a      	orrs	r2, r1
 8003376:	65da      	str	r2, [r3, #92]	; 0x5c
 8003378:	e01c      	b.n	80033b4 <HAL_RCC_OscConfig+0x41c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x404>
 8003382:	4b8b      	ldr	r3, [pc, #556]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003386:	4b8a      	ldr	r3, [pc, #552]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003388:	2104      	movs	r1, #4
 800338a:	430a      	orrs	r2, r1
 800338c:	65da      	str	r2, [r3, #92]	; 0x5c
 800338e:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003390:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003392:	4b87      	ldr	r3, [pc, #540]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003394:	2101      	movs	r1, #1
 8003396:	430a      	orrs	r2, r1
 8003398:	65da      	str	r2, [r3, #92]	; 0x5c
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0x41c>
 800339c:	4b84      	ldr	r3, [pc, #528]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800339e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033a0:	4b83      	ldr	r3, [pc, #524]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	438a      	bics	r2, r1
 80033a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80033a8:	4b81      	ldr	r3, [pc, #516]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80033aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ac:	4b80      	ldr	r3, [pc, #512]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80033ae:	2104      	movs	r1, #4
 80033b0:	438a      	bics	r2, r1
 80033b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d014      	beq.n	80033e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fcdc 	bl	8001d78 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c4:	e009      	b.n	80033da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe fcd7 	bl	8001d78 <HAL_GetTick>
 80033ca:	0002      	movs	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	4a79      	ldr	r2, [pc, #484]	; (80035b8 <HAL_RCC_OscConfig+0x620>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0e6      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033da:	4b75      	ldr	r3, [pc, #468]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	2202      	movs	r2, #2
 80033e0:	4013      	ands	r3, r2
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x42e>
 80033e4:	e013      	b.n	800340e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe fcc7 	bl	8001d78 <HAL_GetTick>
 80033ea:	0003      	movs	r3, r0
 80033ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ee:	e009      	b.n	8003404 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe fcc2 	bl	8001d78 <HAL_GetTick>
 80033f4:	0002      	movs	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	4a6f      	ldr	r2, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x620>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0d1      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	2202      	movs	r2, #2
 800340a:	4013      	ands	r3, r2
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800340e:	231f      	movs	r3, #31
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b65      	ldr	r3, [pc, #404]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800341a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800341c:	4b64      	ldr	r3, [pc, #400]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800341e:	4967      	ldr	r1, [pc, #412]	; (80035bc <HAL_RCC_OscConfig+0x624>)
 8003420:	400a      	ands	r2, r1
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d100      	bne.n	800342e <HAL_RCC_OscConfig+0x496>
 800342c:	e0bb      	b.n	80035a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342e:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2238      	movs	r2, #56	; 0x38
 8003434:	4013      	ands	r3, r2
 8003436:	2b10      	cmp	r3, #16
 8003438:	d100      	bne.n	800343c <HAL_RCC_OscConfig+0x4a4>
 800343a:	e07b      	b.n	8003534 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d156      	bne.n	80034f2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003444:	4b5a      	ldr	r3, [pc, #360]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800344a:	495d      	ldr	r1, [pc, #372]	; (80035c0 <HAL_RCC_OscConfig+0x628>)
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fe fc92 	bl	8001d78 <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345a:	f7fe fc8d 	bl	8001d78 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e09d      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	049b      	lsls	r3, r3, #18
 8003474:	4013      	ands	r3, r2
 8003476:	d1f0      	bne.n	800345a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003478:	4b4d      	ldr	r3, [pc, #308]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a51      	ldr	r2, [pc, #324]	; (80035c4 <HAL_RCC_OscConfig+0x62c>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	431a      	orrs	r2, r3
 80034a6:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80034a8:	430a      	orrs	r2, r1
 80034aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b40      	ldr	r3, [pc, #256]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	0449      	lsls	r1, r1, #17
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80034ba:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80034c0:	2180      	movs	r1, #128	; 0x80
 80034c2:	0549      	lsls	r1, r1, #21
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe fc56 	bl	8001d78 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d2:	f7fe fc51 	bl	8001d78 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e061      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e4:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	049b      	lsls	r3, r3, #18
 80034ec:	4013      	ands	r3, r2
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x53a>
 80034f0:	e059      	b.n	80035a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b2f      	ldr	r3, [pc, #188]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 80034f8:	4931      	ldr	r1, [pc, #196]	; (80035c0 <HAL_RCC_OscConfig+0x628>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe fc3b 	bl	8001d78 <HAL_GetTick>
 8003502:	0003      	movs	r3, r0
 8003504:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fc36 	bl	8001d78 <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e046      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	049b      	lsls	r3, r3, #18
 8003522:	4013      	ands	r3, r2
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 800352c:	4926      	ldr	r1, [pc, #152]	; (80035c8 <HAL_RCC_OscConfig+0x630>)
 800352e:	400a      	ands	r2, r1
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	e038      	b.n	80035a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e033      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x618>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2203      	movs	r2, #3
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	429a      	cmp	r2, r3
 8003552:	d126      	bne.n	80035a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2270      	movs	r2, #112	; 0x70
 8003558:	401a      	ands	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	23fe      	movs	r3, #254	; 0xfe
 8003566:	01db      	lsls	r3, r3, #7
 8003568:	401a      	ands	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d116      	bne.n	80035a2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	23f8      	movs	r3, #248	; 0xf8
 8003578:	039b      	lsls	r3, r3, #14
 800357a:	401a      	ands	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d10e      	bne.n	80035a2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	23e0      	movs	r3, #224	; 0xe0
 8003588:	051b      	lsls	r3, r3, #20
 800358a:	401a      	ands	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	0f5b      	lsrs	r3, r3, #29
 8003598:	075a      	lsls	r2, r3, #29
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d001      	beq.n	80035a6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b008      	add	sp, #32
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40007000 	.word	0x40007000
 80035b8:	00001388 	.word	0x00001388
 80035bc:	efffffff 	.word	0xefffffff
 80035c0:	feffffff 	.word	0xfeffffff
 80035c4:	11c1808c 	.word	0x11c1808c
 80035c8:	eefefffc 	.word	0xeefefffc

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0e9      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2207      	movs	r2, #7
 80035e6:	4013      	ands	r3, r2
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d91e      	bls.n	800362c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b73      	ldr	r3, [pc, #460]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2207      	movs	r2, #7
 80035f4:	4393      	bics	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	4b70      	ldr	r3, [pc, #448]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003600:	f7fe fbba 	bl	8001d78 <HAL_GetTick>
 8003604:	0003      	movs	r3, r0
 8003606:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003608:	e009      	b.n	800361e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360a:	f7fe fbb5 	bl	8001d78 <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	4a6a      	ldr	r2, [pc, #424]	; (80037c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0ca      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800361e:	4b67      	ldr	r3, [pc, #412]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2207      	movs	r2, #7
 8003624:	4013      	ands	r3, r2
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d1ee      	bne.n	800360a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2202      	movs	r2, #2
 8003632:	4013      	ands	r3, r2
 8003634:	d015      	beq.n	8003662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2204      	movs	r2, #4
 800363c:	4013      	ands	r3, r2
 800363e:	d006      	beq.n	800364e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003640:	4b60      	ldr	r3, [pc, #384]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003646:	21e0      	movs	r1, #224	; 0xe0
 8003648:	01c9      	lsls	r1, r1, #7
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364e:	4b5d      	ldr	r3, [pc, #372]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4a5d      	ldr	r2, [pc, #372]	; (80037c8 <HAL_RCC_ClockConfig+0x1fc>)
 8003654:	4013      	ands	r3, r2
 8003656:	0019      	movs	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 800365e:	430a      	orrs	r2, r1
 8003660:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	4013      	ands	r3, r2
 800366a:	d057      	beq.n	800371c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003674:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	4013      	ands	r3, r2
 800367e:	d12b      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e097      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d107      	bne.n	800369c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368c:	4b4d      	ldr	r3, [pc, #308]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	049b      	lsls	r3, r3, #18
 8003694:	4013      	ands	r3, r2
 8003696:	d11f      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e08b      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a4:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4013      	ands	r3, r2
 80036ae:	d113      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e07f      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036bc:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 80036be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c0:	2202      	movs	r2, #2
 80036c2:	4013      	ands	r3, r2
 80036c4:	d108      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e074      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2202      	movs	r2, #2
 80036d0:	4013      	ands	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e06d      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d8:	4b3a      	ldr	r3, [pc, #232]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2207      	movs	r2, #7
 80036de:	4393      	bics	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ec:	f7fe fb44 	bl	8001d78 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f4:	e009      	b.n	800370a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f6:	f7fe fb3f 	bl	8001d78 <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	4a2f      	ldr	r2, [pc, #188]	; (80037c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e054      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2238      	movs	r2, #56	; 0x38
 8003710:	401a      	ands	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	429a      	cmp	r2, r3
 800371a:	d1ec      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2207      	movs	r2, #7
 8003722:	4013      	ands	r3, r2
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d21e      	bcs.n	8003768 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2207      	movs	r2, #7
 8003730:	4393      	bics	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800373c:	f7fe fb1c 	bl	8001d78 <HAL_GetTick>
 8003740:	0003      	movs	r3, r0
 8003742:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003744:	e009      	b.n	800375a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003746:	f7fe fb17 	bl	8001d78 <HAL_GetTick>
 800374a:	0002      	movs	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e02c      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2207      	movs	r2, #7
 8003760:	4013      	ands	r3, r2
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d1ee      	bne.n	8003746 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2204      	movs	r2, #4
 800376e:	4013      	ands	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <HAL_RCC_ClockConfig+0x200>)
 8003778:	4013      	ands	r3, r2
 800377a:	0019      	movs	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003782:	430a      	orrs	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003786:	f000 f829 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 800378a:	0001      	movs	r1, r0
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCC_ClockConfig+0x1f8>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	220f      	movs	r2, #15
 8003794:	401a      	ands	r2, r3
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCC_ClockConfig+0x204>)
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	58d3      	ldr	r3, [r2, r3]
 800379c:	221f      	movs	r2, #31
 800379e:	4013      	ands	r3, r2
 80037a0:	000a      	movs	r2, r1
 80037a2:	40da      	lsrs	r2, r3
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x208>)
 80037a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_ClockConfig+0x20c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7fe fa87 	bl	8001cc0 <HAL_InitTick>
 80037b2:	0003      	movs	r3, r0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b004      	add	sp, #16
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40022000 	.word	0x40022000
 80037c0:	00001388 	.word	0x00001388
 80037c4:	40021000 	.word	0x40021000
 80037c8:	fffff0ff 	.word	0xfffff0ff
 80037cc:	ffff8fff 	.word	0xffff8fff
 80037d0:	08005238 	.word	0x08005238
 80037d4:	20000000 	.word	0x20000000
 80037d8:	20000004 	.word	0x20000004

080037dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e2:	4b3c      	ldr	r3, [pc, #240]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2238      	movs	r2, #56	; 0x38
 80037e8:	4013      	ands	r3, r2
 80037ea:	d10f      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80037ec:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0adb      	lsrs	r3, r3, #11
 80037f2:	2207      	movs	r2, #7
 80037f4:	4013      	ands	r3, r2
 80037f6:	2201      	movs	r2, #1
 80037f8:	409a      	lsls	r2, r3
 80037fa:	0013      	movs	r3, r2
 80037fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	4835      	ldr	r0, [pc, #212]	; (80038d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003802:	f7fc fc81 	bl	8000108 <__udivsi3>
 8003806:	0003      	movs	r3, r0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	e05d      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800380c:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2238      	movs	r2, #56	; 0x38
 8003812:	4013      	ands	r3, r2
 8003814:	2b08      	cmp	r3, #8
 8003816:	d102      	bne.n	800381e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003818:	4b30      	ldr	r3, [pc, #192]	; (80038dc <HAL_RCC_GetSysClockFreq+0x100>)
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	e054      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800381e:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2238      	movs	r2, #56	; 0x38
 8003824:	4013      	ands	r3, r2
 8003826:	2b10      	cmp	r3, #16
 8003828:	d138      	bne.n	800389c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800382a:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2203      	movs	r2, #3
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	2207      	movs	r2, #7
 800383c:	4013      	ands	r3, r2
 800383e:	3301      	adds	r3, #1
 8003840:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d10d      	bne.n	8003864 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	4824      	ldr	r0, [pc, #144]	; (80038dc <HAL_RCC_GetSysClockFreq+0x100>)
 800384c:	f7fc fc5c 	bl	8000108 <__udivsi3>
 8003850:	0003      	movs	r3, r0
 8003852:	0019      	movs	r1, r3
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	227f      	movs	r2, #127	; 0x7f
 800385c:	4013      	ands	r3, r2
 800385e:	434b      	muls	r3, r1
 8003860:	617b      	str	r3, [r7, #20]
        break;
 8003862:	e00d      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	481c      	ldr	r0, [pc, #112]	; (80038d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003868:	f7fc fc4e 	bl	8000108 <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	0019      	movs	r1, r3
 8003870:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	227f      	movs	r2, #127	; 0x7f
 8003878:	4013      	ands	r3, r2
 800387a:	434b      	muls	r3, r1
 800387c:	617b      	str	r3, [r7, #20]
        break;
 800387e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0f5b      	lsrs	r3, r3, #29
 8003886:	2207      	movs	r2, #7
 8003888:	4013      	ands	r3, r2
 800388a:	3301      	adds	r3, #1
 800388c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	6978      	ldr	r0, [r7, #20]
 8003892:	f7fc fc39 	bl	8000108 <__udivsi3>
 8003896:	0003      	movs	r3, r0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	e015      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2238      	movs	r2, #56	; 0x38
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d103      	bne.n	80038b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	e00b      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2238      	movs	r2, #56	; 0x38
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b18      	cmp	r3, #24
 80038ba:	d103      	bne.n	80038c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80038bc:	23fa      	movs	r3, #250	; 0xfa
 80038be:	01db      	lsls	r3, r3, #7
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e001      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038c8:	693b      	ldr	r3, [r7, #16]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b006      	add	sp, #24
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	40021000 	.word	0x40021000
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	007a1200 	.word	0x007a1200

080038e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b02      	ldr	r3, [pc, #8]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b5b0      	push	{r4, r5, r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038f8:	f7ff fff2 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 80038fc:	0004      	movs	r4, r0
 80038fe:	f7ff fb3f 	bl	8002f80 <LL_RCC_GetAPB1Prescaler>
 8003902:	0003      	movs	r3, r0
 8003904:	0b1a      	lsrs	r2, r3, #12
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003908:	0092      	lsls	r2, r2, #2
 800390a:	58d3      	ldr	r3, [r2, r3]
 800390c:	221f      	movs	r2, #31
 800390e:	4013      	ands	r3, r2
 8003910:	40dc      	lsrs	r4, r3
 8003912:	0023      	movs	r3, r4
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bdb0      	pop	{r4, r5, r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	08005278 	.word	0x08005278

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003928:	2313      	movs	r3, #19
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003930:	2312      	movs	r3, #18
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	4013      	ands	r3, r2
 8003942:	d100      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003944:	e0a3      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2011      	movs	r0, #17
 8003948:	183b      	adds	r3, r7, r0
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394e:	4bc3      	ldr	r3, [pc, #780]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	055b      	lsls	r3, r3, #21
 8003956:	4013      	ands	r3, r2
 8003958:	d110      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	4bc0      	ldr	r3, [pc, #768]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800395c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395e:	4bbf      	ldr	r3, [pc, #764]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	0549      	lsls	r1, r1, #21
 8003964:	430a      	orrs	r2, r1
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c
 8003968:	4bbc      	ldr	r3, [pc, #752]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800396a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	055b      	lsls	r3, r3, #21
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003976:	183b      	adds	r3, r7, r0
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800397c:	4bb8      	ldr	r3, [pc, #736]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4bb7      	ldr	r3, [pc, #732]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003982:	2180      	movs	r1, #128	; 0x80
 8003984:	0049      	lsls	r1, r1, #1
 8003986:	430a      	orrs	r2, r1
 8003988:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800398a:	f7fe f9f5 	bl	8001d78 <HAL_GetTick>
 800398e:	0003      	movs	r3, r0
 8003990:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003992:	e00b      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003994:	f7fe f9f0 	bl	8001d78 <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d904      	bls.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80039a2:	2313      	movs	r3, #19
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	2203      	movs	r2, #3
 80039a8:	701a      	strb	r2, [r3, #0]
        break;
 80039aa:	e005      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ac:	4bac      	ldr	r3, [pc, #688]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4013      	ands	r3, r2
 80039b6:	d0ed      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80039b8:	2313      	movs	r3, #19
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d154      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039c2:	4ba6      	ldr	r3, [pc, #664]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039c6:	23c0      	movs	r3, #192	; 0xc0
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4013      	ands	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d019      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d014      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039de:	4b9f      	ldr	r3, [pc, #636]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	4aa0      	ldr	r2, [pc, #640]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039e8:	4b9c      	ldr	r3, [pc, #624]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ec:	4b9b      	ldr	r3, [pc, #620]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ee:	2180      	movs	r1, #128	; 0x80
 80039f0:	0249      	lsls	r1, r1, #9
 80039f2:	430a      	orrs	r2, r1
 80039f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039f6:	4b99      	ldr	r3, [pc, #612]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039fa:	4b98      	ldr	r3, [pc, #608]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039fc:	499a      	ldr	r1, [pc, #616]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80039fe:	400a      	ands	r2, r1
 8003a00:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a02:	4b96      	ldr	r3, [pc, #600]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d016      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe f9b2 	bl	8001d78 <HAL_GetTick>
 8003a14:	0003      	movs	r3, r0
 8003a16:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a18:	e00c      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fe f9ad 	bl	8001d78 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	4a91      	ldr	r2, [pc, #580]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d904      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003a2a:	2313      	movs	r3, #19
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2203      	movs	r2, #3
 8003a30:	701a      	strb	r2, [r3, #0]
            break;
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a34:	4b89      	ldr	r3, [pc, #548]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	2202      	movs	r2, #2
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d0ed      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a3e:	2313      	movs	r3, #19
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a48:	4b84      	ldr	r3, [pc, #528]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	4a85      	ldr	r2, [pc, #532]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a56:	4b81      	ldr	r3, [pc, #516]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a5c:	e00c      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a5e:	2312      	movs	r3, #18
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	2213      	movs	r2, #19
 8003a64:	18ba      	adds	r2, r7, r2
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e005      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	2312      	movs	r3, #18
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	2213      	movs	r2, #19
 8003a72:	18ba      	adds	r2, r7, r2
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a78:	2311      	movs	r3, #17
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a82:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a86:	4b75      	ldr	r3, [pc, #468]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a88:	4979      	ldr	r1, [pc, #484]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	4013      	ands	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a98:	4b70      	ldr	r3, [pc, #448]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4b6d      	ldr	r3, [pc, #436]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d009      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ab6:	4b69      	ldr	r3, [pc, #420]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	220c      	movs	r2, #12
 8003abc:	4393      	bics	r3, r2
 8003abe:	0019      	movs	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	4b65      	ldr	r3, [pc, #404]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2210      	movs	r2, #16
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ad4:	4b61      	ldr	r3, [pc, #388]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	4a66      	ldr	r2, [pc, #408]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	0019      	movs	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	4b5e      	ldr	r3, [pc, #376]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003af4:	4b59      	ldr	r3, [pc, #356]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	4a5f      	ldr	r2, [pc, #380]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4013      	ands	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b14:	4b51      	ldr	r3, [pc, #324]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	4b4e      	ldr	r3, [pc, #312]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b32:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	01db      	lsls	r3, r3, #7
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d015      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b52:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	0899      	lsrs	r1, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d106      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b70:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	0249      	lsls	r1, r1, #9
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	031b      	lsls	r3, r3, #12
 8003b86:	4013      	ands	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	4393      	bics	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b98:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	039b      	lsls	r3, r3, #14
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	03db      	lsls	r3, r3, #15
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d106      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0449      	lsls	r1, r1, #17
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	03db      	lsls	r3, r3, #15
 8003be0:	4013      	ands	r3, r2
 8003be2:	d016      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	0019      	movs	r1, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	045b      	lsls	r3, r3, #17
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d106      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c04:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	0449      	lsls	r1, r1, #17
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	0019      	movs	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	01db      	lsls	r3, r3, #7
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	0249      	lsls	r1, r1, #9
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c4c:	2312      	movs	r3, #18
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	781b      	ldrb	r3, [r3, #0]
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b006      	add	sp, #24
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
 8003c64:	fffffcff 	.word	0xfffffcff
 8003c68:	fffeffff 	.word	0xfffeffff
 8003c6c:	00001388 	.word	0x00001388
 8003c70:	efffffff 	.word	0xefffffff
 8003c74:	fffff3ff 	.word	0xfffff3ff
 8003c78:	fff3ffff 	.word	0xfff3ffff
 8003c7c:	ffcfffff 	.word	0xffcfffff
 8003c80:	ffffcfff 	.word	0xffffcfff
 8003c84:	ffbfffff 	.word	0xffbfffff
 8003c88:	feffffff 	.word	0xfeffffff
 8003c8c:	ffff3fff 	.word	0xffff3fff

08003c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e046      	b.n	8003d30 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2288      	movs	r2, #136	; 0x88
 8003ca6:	589b      	ldr	r3, [r3, r2]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2284      	movs	r2, #132	; 0x84
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7fd faa2 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2288      	movs	r2, #136	; 0x88
 8003cc0:	2124      	movs	r1, #36	; 0x24
 8003cc2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f000 f9ae 	bl	8004038 <UART_SetConfig>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e024      	b.n	8003d30 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 fc5f 	bl	80045b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	490d      	ldr	r1, [pc, #52]	; (8003d38 <HAL_UART_Init+0xa8>)
 8003d02:	400a      	ands	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	212a      	movs	r1, #42	; 0x2a
 8003d12:	438a      	bics	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2101      	movs	r1, #1
 8003d22:	430a      	orrs	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f000 fcf7 	bl	800471c <UART_CheckIdleState>
 8003d2e:	0003      	movs	r3, r0
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b002      	add	sp, #8
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	ffffb7ff 	.word	0xffffb7ff

08003d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	1dbb      	adds	r3, r7, #6
 8003d4a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2288      	movs	r2, #136	; 0x88
 8003d50:	589b      	ldr	r3, [r3, r2]
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d000      	beq.n	8003d58 <HAL_UART_Transmit+0x1c>
 8003d56:	e088      	b.n	8003e6a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_UART_Transmit+0x2a>
 8003d5e:	1dbb      	adds	r3, r7, #6
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e080      	b.n	8003e6c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	015b      	lsls	r3, r3, #5
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d109      	bne.n	8003d8a <HAL_UART_Transmit+0x4e>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d105      	bne.n	8003d8a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2201      	movs	r2, #1
 8003d82:	4013      	ands	r3, r2
 8003d84:	d001      	beq.n	8003d8a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e070      	b.n	8003e6c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2290      	movs	r2, #144	; 0x90
 8003d8e:	2100      	movs	r1, #0
 8003d90:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2288      	movs	r2, #136	; 0x88
 8003d96:	2121      	movs	r1, #33	; 0x21
 8003d98:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9a:	f7fd ffed 	bl	8001d78 <HAL_GetTick>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1dba      	adds	r2, r7, #6
 8003da6:	2154      	movs	r1, #84	; 0x54
 8003da8:	8812      	ldrh	r2, [r2, #0]
 8003daa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1dba      	adds	r2, r7, #6
 8003db0:	2156      	movs	r1, #86	; 0x56
 8003db2:	8812      	ldrh	r2, [r2, #0]
 8003db4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	015b      	lsls	r3, r3, #5
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d108      	bne.n	8003dd4 <HAL_UART_Transmit+0x98>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e003      	b.n	8003ddc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ddc:	e02c      	b.n	8003e38 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	0013      	movs	r3, r2
 8003de8:	2200      	movs	r2, #0
 8003dea:	2180      	movs	r1, #128	; 0x80
 8003dec:	f000 fce4 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e039      	b.n	8003e6c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	001a      	movs	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	05d2      	lsls	r2, r2, #23
 8003e0a:	0dd2      	lsrs	r2, r2, #23
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	3302      	adds	r3, #2
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e007      	b.n	8003e26 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	3301      	adds	r3, #1
 8003e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2256      	movs	r2, #86	; 0x56
 8003e2a:	5a9b      	ldrh	r3, [r3, r2]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b299      	uxth	r1, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2256      	movs	r2, #86	; 0x56
 8003e36:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2256      	movs	r2, #86	; 0x56
 8003e3c:	5a9b      	ldrh	r3, [r3, r2]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1cc      	bne.n	8003dde <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	0013      	movs	r3, r2
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	f000 fcb1 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e006      	b.n	8003e6c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2288      	movs	r2, #136	; 0x88
 8003e62:	2120      	movs	r1, #32
 8003e64:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e000      	b.n	8003e6c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
  }
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b008      	add	sp, #32
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	228c      	movs	r2, #140	; 0x8c
 8003e88:	589b      	ldr	r3, [r3, r2]
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d000      	beq.n	8003e90 <HAL_UART_Receive+0x1c>
 8003e8e:	e0cc      	b.n	800402a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_Receive+0x2a>
 8003e96:	1dbb      	adds	r3, r7, #6
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e0c4      	b.n	800402c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	015b      	lsls	r3, r3, #5
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d109      	bne.n	8003ec2 <HAL_UART_Receive+0x4e>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d001      	beq.n	8003ec2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0b4      	b.n	800402c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2290      	movs	r2, #144	; 0x90
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	228c      	movs	r2, #140	; 0x8c
 8003ece:	2122      	movs	r1, #34	; 0x22
 8003ed0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ed8:	f7fd ff4e 	bl	8001d78 <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1dba      	adds	r2, r7, #6
 8003ee4:	215c      	movs	r1, #92	; 0x5c
 8003ee6:	8812      	ldrh	r2, [r2, #0]
 8003ee8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1dba      	adds	r2, r7, #6
 8003eee:	215e      	movs	r1, #94	; 0x5e
 8003ef0:	8812      	ldrh	r2, [r2, #0]
 8003ef2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	015b      	lsls	r3, r3, #5
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d10d      	bne.n	8003f1c <HAL_UART_Receive+0xa8>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <HAL_UART_Receive+0x9e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2260      	movs	r2, #96	; 0x60
 8003f0c:	4949      	ldr	r1, [pc, #292]	; (8004034 <HAL_UART_Receive+0x1c0>)
 8003f0e:	5299      	strh	r1, [r3, r2]
 8003f10:	e02e      	b.n	8003f70 <HAL_UART_Receive+0xfc>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2260      	movs	r2, #96	; 0x60
 8003f16:	21ff      	movs	r1, #255	; 0xff
 8003f18:	5299      	strh	r1, [r3, r2]
 8003f1a:	e029      	b.n	8003f70 <HAL_UART_Receive+0xfc>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10d      	bne.n	8003f40 <HAL_UART_Receive+0xcc>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d104      	bne.n	8003f36 <HAL_UART_Receive+0xc2>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2260      	movs	r2, #96	; 0x60
 8003f30:	21ff      	movs	r1, #255	; 0xff
 8003f32:	5299      	strh	r1, [r3, r2]
 8003f34:	e01c      	b.n	8003f70 <HAL_UART_Receive+0xfc>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2260      	movs	r2, #96	; 0x60
 8003f3a:	217f      	movs	r1, #127	; 0x7f
 8003f3c:	5299      	strh	r1, [r3, r2]
 8003f3e:	e017      	b.n	8003f70 <HAL_UART_Receive+0xfc>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	055b      	lsls	r3, r3, #21
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d10d      	bne.n	8003f68 <HAL_UART_Receive+0xf4>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_UART_Receive+0xea>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2260      	movs	r2, #96	; 0x60
 8003f58:	217f      	movs	r1, #127	; 0x7f
 8003f5a:	5299      	strh	r1, [r3, r2]
 8003f5c:	e008      	b.n	8003f70 <HAL_UART_Receive+0xfc>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2260      	movs	r2, #96	; 0x60
 8003f62:	213f      	movs	r1, #63	; 0x3f
 8003f64:	5299      	strh	r1, [r3, r2]
 8003f66:	e003      	b.n	8003f70 <HAL_UART_Receive+0xfc>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2260      	movs	r2, #96	; 0x60
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003f70:	2312      	movs	r3, #18
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	2160      	movs	r1, #96	; 0x60
 8003f78:	5a52      	ldrh	r2, [r2, r1]
 8003f7a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	015b      	lsls	r3, r3, #5
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d108      	bne.n	8003f9a <HAL_UART_Receive+0x126>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	e003      	b.n	8003fa2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003fa2:	e036      	b.n	8004012 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	0013      	movs	r3, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	f000 fc01 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e036      	b.n	800402c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2212      	movs	r2, #18
 8003fce:	18ba      	adds	r2, r7, r2
 8003fd0:	8812      	ldrh	r2, [r2, #0]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	3302      	adds	r3, #2
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	e00e      	b.n	8004000 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2212      	movs	r2, #18
 8003fec:	18ba      	adds	r2, r7, r2
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	225e      	movs	r2, #94	; 0x5e
 8004004:	5a9b      	ldrh	r3, [r3, r2]
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b299      	uxth	r1, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	225e      	movs	r2, #94	; 0x5e
 8004010:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	225e      	movs	r2, #94	; 0x5e
 8004016:	5a9b      	ldrh	r3, [r3, r2]
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1c2      	bne.n	8003fa4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	228c      	movs	r2, #140	; 0x8c
 8004022:	2120      	movs	r1, #32
 8004024:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e000      	b.n	800402c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800402a:	2302      	movs	r3, #2
  }
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b008      	add	sp, #32
 8004032:	bd80      	pop	{r7, pc}
 8004034:	000001ff 	.word	0x000001ff

08004038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	b5b0      	push	{r4, r5, r7, lr}
 800403a:	b090      	sub	sp, #64	; 0x40
 800403c:	af00      	add	r7, sp, #0
 800403e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004040:	231a      	movs	r3, #26
 8004042:	2220      	movs	r2, #32
 8004044:	189b      	adds	r3, r3, r2
 8004046:	19db      	adds	r3, r3, r7
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	431a      	orrs	r2, r3
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	431a      	orrs	r2, r3
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	4313      	orrs	r3, r2
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4aaf      	ldr	r2, [pc, #700]	; (8004328 <UART_SetConfig+0x2f0>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004076:	430b      	orrs	r3, r1
 8004078:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4aaa      	ldr	r2, [pc, #680]	; (800432c <UART_SetConfig+0x2f4>)
 8004082:	4013      	ands	r3, r2
 8004084:	0018      	movs	r0, r3
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	68d9      	ldr	r1, [r3, #12]
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	0003      	movs	r3, r0
 8004090:	430b      	orrs	r3, r1
 8004092:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4aa4      	ldr	r2, [pc, #656]	; (8004330 <UART_SetConfig+0x2f8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040aa:	4313      	orrs	r3, r2
 80040ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a9f      	ldr	r2, [pc, #636]	; (8004334 <UART_SetConfig+0x2fc>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	220f      	movs	r2, #15
 80040cc:	4393      	bics	r3, r2
 80040ce:	0018      	movs	r0, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	0003      	movs	r3, r0
 80040da:	430b      	orrs	r3, r1
 80040dc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a95      	ldr	r2, [pc, #596]	; (8004338 <UART_SetConfig+0x300>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d131      	bne.n	800414c <UART_SetConfig+0x114>
 80040e8:	4b94      	ldr	r3, [pc, #592]	; (800433c <UART_SetConfig+0x304>)
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	2203      	movs	r2, #3
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d01d      	beq.n	8004130 <UART_SetConfig+0xf8>
 80040f4:	d823      	bhi.n	800413e <UART_SetConfig+0x106>
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d00c      	beq.n	8004114 <UART_SetConfig+0xdc>
 80040fa:	d820      	bhi.n	800413e <UART_SetConfig+0x106>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <UART_SetConfig+0xce>
 8004100:	2b01      	cmp	r3, #1
 8004102:	d00e      	beq.n	8004122 <UART_SetConfig+0xea>
 8004104:	e01b      	b.n	800413e <UART_SetConfig+0x106>
 8004106:	231b      	movs	r3, #27
 8004108:	2220      	movs	r2, #32
 800410a:	189b      	adds	r3, r3, r2
 800410c:	19db      	adds	r3, r3, r7
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e0b4      	b.n	800427e <UART_SetConfig+0x246>
 8004114:	231b      	movs	r3, #27
 8004116:	2220      	movs	r2, #32
 8004118:	189b      	adds	r3, r3, r2
 800411a:	19db      	adds	r3, r3, r7
 800411c:	2202      	movs	r2, #2
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e0ad      	b.n	800427e <UART_SetConfig+0x246>
 8004122:	231b      	movs	r3, #27
 8004124:	2220      	movs	r2, #32
 8004126:	189b      	adds	r3, r3, r2
 8004128:	19db      	adds	r3, r3, r7
 800412a:	2204      	movs	r2, #4
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e0a6      	b.n	800427e <UART_SetConfig+0x246>
 8004130:	231b      	movs	r3, #27
 8004132:	2220      	movs	r2, #32
 8004134:	189b      	adds	r3, r3, r2
 8004136:	19db      	adds	r3, r3, r7
 8004138:	2208      	movs	r2, #8
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	e09f      	b.n	800427e <UART_SetConfig+0x246>
 800413e:	231b      	movs	r3, #27
 8004140:	2220      	movs	r2, #32
 8004142:	189b      	adds	r3, r3, r2
 8004144:	19db      	adds	r3, r3, r7
 8004146:	2210      	movs	r2, #16
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e098      	b.n	800427e <UART_SetConfig+0x246>
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a7b      	ldr	r2, [pc, #492]	; (8004340 <UART_SetConfig+0x308>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d131      	bne.n	80041ba <UART_SetConfig+0x182>
 8004156:	4b79      	ldr	r3, [pc, #484]	; (800433c <UART_SetConfig+0x304>)
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	220c      	movs	r2, #12
 800415c:	4013      	ands	r3, r2
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d01d      	beq.n	800419e <UART_SetConfig+0x166>
 8004162:	d823      	bhi.n	80041ac <UART_SetConfig+0x174>
 8004164:	2b08      	cmp	r3, #8
 8004166:	d00c      	beq.n	8004182 <UART_SetConfig+0x14a>
 8004168:	d820      	bhi.n	80041ac <UART_SetConfig+0x174>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <UART_SetConfig+0x13c>
 800416e:	2b04      	cmp	r3, #4
 8004170:	d00e      	beq.n	8004190 <UART_SetConfig+0x158>
 8004172:	e01b      	b.n	80041ac <UART_SetConfig+0x174>
 8004174:	231b      	movs	r3, #27
 8004176:	2220      	movs	r2, #32
 8004178:	189b      	adds	r3, r3, r2
 800417a:	19db      	adds	r3, r3, r7
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e07d      	b.n	800427e <UART_SetConfig+0x246>
 8004182:	231b      	movs	r3, #27
 8004184:	2220      	movs	r2, #32
 8004186:	189b      	adds	r3, r3, r2
 8004188:	19db      	adds	r3, r3, r7
 800418a:	2202      	movs	r2, #2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	e076      	b.n	800427e <UART_SetConfig+0x246>
 8004190:	231b      	movs	r3, #27
 8004192:	2220      	movs	r2, #32
 8004194:	189b      	adds	r3, r3, r2
 8004196:	19db      	adds	r3, r3, r7
 8004198:	2204      	movs	r2, #4
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e06f      	b.n	800427e <UART_SetConfig+0x246>
 800419e:	231b      	movs	r3, #27
 80041a0:	2220      	movs	r2, #32
 80041a2:	189b      	adds	r3, r3, r2
 80041a4:	19db      	adds	r3, r3, r7
 80041a6:	2208      	movs	r2, #8
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e068      	b.n	800427e <UART_SetConfig+0x246>
 80041ac:	231b      	movs	r3, #27
 80041ae:	2220      	movs	r2, #32
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	19db      	adds	r3, r3, r7
 80041b4:	2210      	movs	r2, #16
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e061      	b.n	800427e <UART_SetConfig+0x246>
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a61      	ldr	r2, [pc, #388]	; (8004344 <UART_SetConfig+0x30c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d106      	bne.n	80041d2 <UART_SetConfig+0x19a>
 80041c4:	231b      	movs	r3, #27
 80041c6:	2220      	movs	r2, #32
 80041c8:	189b      	adds	r3, r3, r2
 80041ca:	19db      	adds	r3, r3, r7
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e055      	b.n	800427e <UART_SetConfig+0x246>
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a5c      	ldr	r2, [pc, #368]	; (8004348 <UART_SetConfig+0x310>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d106      	bne.n	80041ea <UART_SetConfig+0x1b2>
 80041dc:	231b      	movs	r3, #27
 80041de:	2220      	movs	r2, #32
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	19db      	adds	r3, r3, r7
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e049      	b.n	800427e <UART_SetConfig+0x246>
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a50      	ldr	r2, [pc, #320]	; (8004330 <UART_SetConfig+0x2f8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d13e      	bne.n	8004272 <UART_SetConfig+0x23a>
 80041f4:	4b51      	ldr	r3, [pc, #324]	; (800433c <UART_SetConfig+0x304>)
 80041f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041f8:	23c0      	movs	r3, #192	; 0xc0
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	4013      	ands	r3, r2
 80041fe:	22c0      	movs	r2, #192	; 0xc0
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	4293      	cmp	r3, r2
 8004204:	d027      	beq.n	8004256 <UART_SetConfig+0x21e>
 8004206:	22c0      	movs	r2, #192	; 0xc0
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	4293      	cmp	r3, r2
 800420c:	d82a      	bhi.n	8004264 <UART_SetConfig+0x22c>
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	4293      	cmp	r3, r2
 8004214:	d011      	beq.n	800423a <UART_SetConfig+0x202>
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	0112      	lsls	r2, r2, #4
 800421a:	4293      	cmp	r3, r2
 800421c:	d822      	bhi.n	8004264 <UART_SetConfig+0x22c>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <UART_SetConfig+0x1f4>
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	00d2      	lsls	r2, r2, #3
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <UART_SetConfig+0x210>
 800422a:	e01b      	b.n	8004264 <UART_SetConfig+0x22c>
 800422c:	231b      	movs	r3, #27
 800422e:	2220      	movs	r2, #32
 8004230:	189b      	adds	r3, r3, r2
 8004232:	19db      	adds	r3, r3, r7
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e021      	b.n	800427e <UART_SetConfig+0x246>
 800423a:	231b      	movs	r3, #27
 800423c:	2220      	movs	r2, #32
 800423e:	189b      	adds	r3, r3, r2
 8004240:	19db      	adds	r3, r3, r7
 8004242:	2202      	movs	r2, #2
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e01a      	b.n	800427e <UART_SetConfig+0x246>
 8004248:	231b      	movs	r3, #27
 800424a:	2220      	movs	r2, #32
 800424c:	189b      	adds	r3, r3, r2
 800424e:	19db      	adds	r3, r3, r7
 8004250:	2204      	movs	r2, #4
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e013      	b.n	800427e <UART_SetConfig+0x246>
 8004256:	231b      	movs	r3, #27
 8004258:	2220      	movs	r2, #32
 800425a:	189b      	adds	r3, r3, r2
 800425c:	19db      	adds	r3, r3, r7
 800425e:	2208      	movs	r2, #8
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e00c      	b.n	800427e <UART_SetConfig+0x246>
 8004264:	231b      	movs	r3, #27
 8004266:	2220      	movs	r2, #32
 8004268:	189b      	adds	r3, r3, r2
 800426a:	19db      	adds	r3, r3, r7
 800426c:	2210      	movs	r2, #16
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e005      	b.n	800427e <UART_SetConfig+0x246>
 8004272:	231b      	movs	r3, #27
 8004274:	2220      	movs	r2, #32
 8004276:	189b      	adds	r3, r3, r2
 8004278:	19db      	adds	r3, r3, r7
 800427a:	2210      	movs	r2, #16
 800427c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <UART_SetConfig+0x2f8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d000      	beq.n	800428a <UART_SetConfig+0x252>
 8004288:	e0a9      	b.n	80043de <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800428a:	231b      	movs	r3, #27
 800428c:	2220      	movs	r2, #32
 800428e:	189b      	adds	r3, r3, r2
 8004290:	19db      	adds	r3, r3, r7
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d015      	beq.n	80042c4 <UART_SetConfig+0x28c>
 8004298:	dc18      	bgt.n	80042cc <UART_SetConfig+0x294>
 800429a:	2b04      	cmp	r3, #4
 800429c:	d00d      	beq.n	80042ba <UART_SetConfig+0x282>
 800429e:	dc15      	bgt.n	80042cc <UART_SetConfig+0x294>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <UART_SetConfig+0x272>
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d005      	beq.n	80042b4 <UART_SetConfig+0x27c>
 80042a8:	e010      	b.n	80042cc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042aa:	f7ff fb23 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80042ae:	0003      	movs	r3, r0
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042b2:	e014      	b.n	80042de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <UART_SetConfig+0x314>)
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042b8:	e011      	b.n	80042de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ba:	f7ff fa8f 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 80042be:	0003      	movs	r3, r0
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042c2:	e00c      	b.n	80042de <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042ca:	e008      	b.n	80042de <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80042d0:	231a      	movs	r3, #26
 80042d2:	2220      	movs	r2, #32
 80042d4:	189b      	adds	r3, r3, r2
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]
        break;
 80042dc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d100      	bne.n	80042e6 <UART_SetConfig+0x2ae>
 80042e4:	e14b      	b.n	800457e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ea:	4b19      	ldr	r3, [pc, #100]	; (8004350 <UART_SetConfig+0x318>)
 80042ec:	0052      	lsls	r2, r2, #1
 80042ee:	5ad3      	ldrh	r3, [r2, r3]
 80042f0:	0019      	movs	r1, r3
 80042f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042f4:	f7fb ff08 	bl	8000108 <__udivsi3>
 80042f8:	0003      	movs	r3, r0
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	0013      	movs	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	189b      	adds	r3, r3, r2
 8004306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004308:	429a      	cmp	r2, r3
 800430a:	d305      	bcc.n	8004318 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004314:	429a      	cmp	r2, r3
 8004316:	d91d      	bls.n	8004354 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004318:	231a      	movs	r3, #26
 800431a:	2220      	movs	r2, #32
 800431c:	189b      	adds	r3, r3, r2
 800431e:	19db      	adds	r3, r3, r7
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	e12b      	b.n	800457e <UART_SetConfig+0x546>
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	cfff69f3 	.word	0xcfff69f3
 800432c:	ffffcfff 	.word	0xffffcfff
 8004330:	40008000 	.word	0x40008000
 8004334:	11fff4ff 	.word	0x11fff4ff
 8004338:	40013800 	.word	0x40013800
 800433c:	40021000 	.word	0x40021000
 8004340:	40004400 	.word	0x40004400
 8004344:	40004800 	.word	0x40004800
 8004348:	40004c00 	.word	0x40004c00
 800434c:	00f42400 	.word	0x00f42400
 8004350:	08005298 	.word	0x08005298
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004360:	4b92      	ldr	r3, [pc, #584]	; (80045ac <UART_SetConfig+0x574>)
 8004362:	0052      	lsls	r2, r2, #1
 8004364:	5ad3      	ldrh	r3, [r2, r3]
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	69b8      	ldr	r0, [r7, #24]
 8004372:	69f9      	ldr	r1, [r7, #28]
 8004374:	f7fc f83e 	bl	80003f4 <__aeabi_uldivmod>
 8004378:	0002      	movs	r2, r0
 800437a:	000b      	movs	r3, r1
 800437c:	0e11      	lsrs	r1, r2, #24
 800437e:	021d      	lsls	r5, r3, #8
 8004380:	430d      	orrs	r5, r1
 8004382:	0214      	lsls	r4, r2, #8
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68b8      	ldr	r0, [r7, #8]
 8004392:	68f9      	ldr	r1, [r7, #12]
 8004394:	1900      	adds	r0, r0, r4
 8004396:	4169      	adcs	r1, r5
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f7fc f825 	bl	80003f4 <__aeabi_uldivmod>
 80043aa:	0002      	movs	r2, r0
 80043ac:	000b      	movs	r3, r1
 80043ae:	0013      	movs	r3, r2
 80043b0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	23c0      	movs	r3, #192	; 0xc0
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d309      	bcc.n	80043d0 <UART_SetConfig+0x398>
 80043bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	035b      	lsls	r3, r3, #13
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d204      	bcs.n	80043d0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	e0d6      	b.n	800457e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80043d0:	231a      	movs	r3, #26
 80043d2:	2220      	movs	r2, #32
 80043d4:	189b      	adds	r3, r3, r2
 80043d6:	19db      	adds	r3, r3, r7
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e0cf      	b.n	800457e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d000      	beq.n	80043ec <UART_SetConfig+0x3b4>
 80043ea:	e070      	b.n	80044ce <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80043ec:	231b      	movs	r3, #27
 80043ee:	2220      	movs	r2, #32
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	19db      	adds	r3, r3, r7
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d015      	beq.n	8004426 <UART_SetConfig+0x3ee>
 80043fa:	dc18      	bgt.n	800442e <UART_SetConfig+0x3f6>
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d00d      	beq.n	800441c <UART_SetConfig+0x3e4>
 8004400:	dc15      	bgt.n	800442e <UART_SetConfig+0x3f6>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <UART_SetConfig+0x3d4>
 8004406:	2b02      	cmp	r3, #2
 8004408:	d005      	beq.n	8004416 <UART_SetConfig+0x3de>
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7ff fa72 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004410:	0003      	movs	r3, r0
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004414:	e014      	b.n	8004440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004416:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <UART_SetConfig+0x578>)
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800441a:	e011      	b.n	8004440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441c:	f7ff f9de 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 8004420:	0003      	movs	r3, r0
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004424:	e00c      	b.n	8004440 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800442c:	e008      	b.n	8004440 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004432:	231a      	movs	r3, #26
 8004434:	2220      	movs	r2, #32
 8004436:	189b      	adds	r3, r3, r2
 8004438:	19db      	adds	r3, r3, r7
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
        break;
 800443e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004442:	2b00      	cmp	r3, #0
 8004444:	d100      	bne.n	8004448 <UART_SetConfig+0x410>
 8004446:	e09a      	b.n	800457e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444c:	4b57      	ldr	r3, [pc, #348]	; (80045ac <UART_SetConfig+0x574>)
 800444e:	0052      	lsls	r2, r2, #1
 8004450:	5ad3      	ldrh	r3, [r2, r3]
 8004452:	0019      	movs	r1, r3
 8004454:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004456:	f7fb fe57 	bl	8000108 <__udivsi3>
 800445a:	0003      	movs	r3, r0
 800445c:	005a      	lsls	r2, r3, #1
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	18d2      	adds	r2, r2, r3
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	0019      	movs	r1, r3
 800446c:	0010      	movs	r0, r2
 800446e:	f7fb fe4b 	bl	8000108 <__udivsi3>
 8004472:	0003      	movs	r3, r0
 8004474:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	2b0f      	cmp	r3, #15
 800447a:	d921      	bls.n	80044c0 <UART_SetConfig+0x488>
 800447c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	025b      	lsls	r3, r3, #9
 8004482:	429a      	cmp	r2, r3
 8004484:	d21c      	bcs.n	80044c0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	b29a      	uxth	r2, r3
 800448a:	200e      	movs	r0, #14
 800448c:	2420      	movs	r4, #32
 800448e:	1903      	adds	r3, r0, r4
 8004490:	19db      	adds	r3, r3, r7
 8004492:	210f      	movs	r1, #15
 8004494:	438a      	bics	r2, r1
 8004496:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	2207      	movs	r2, #7
 80044a0:	4013      	ands	r3, r2
 80044a2:	b299      	uxth	r1, r3
 80044a4:	1903      	adds	r3, r0, r4
 80044a6:	19db      	adds	r3, r3, r7
 80044a8:	1902      	adds	r2, r0, r4
 80044aa:	19d2      	adds	r2, r2, r7
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	1902      	adds	r2, r0, r4
 80044b8:	19d2      	adds	r2, r2, r7
 80044ba:	8812      	ldrh	r2, [r2, #0]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	e05e      	b.n	800457e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80044c0:	231a      	movs	r3, #26
 80044c2:	2220      	movs	r2, #32
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	19db      	adds	r3, r3, r7
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e057      	b.n	800457e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ce:	231b      	movs	r3, #27
 80044d0:	2220      	movs	r2, #32
 80044d2:	189b      	adds	r3, r3, r2
 80044d4:	19db      	adds	r3, r3, r7
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d015      	beq.n	8004508 <UART_SetConfig+0x4d0>
 80044dc:	dc18      	bgt.n	8004510 <UART_SetConfig+0x4d8>
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d00d      	beq.n	80044fe <UART_SetConfig+0x4c6>
 80044e2:	dc15      	bgt.n	8004510 <UART_SetConfig+0x4d8>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <UART_SetConfig+0x4b6>
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d005      	beq.n	80044f8 <UART_SetConfig+0x4c0>
 80044ec:	e010      	b.n	8004510 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ee:	f7ff fa01 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80044f2:	0003      	movs	r3, r0
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044f6:	e014      	b.n	8004522 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <UART_SetConfig+0x578>)
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044fc:	e011      	b.n	8004522 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7ff f96d 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 8004502:	0003      	movs	r3, r0
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004506:	e00c      	b.n	8004522 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800450e:	e008      	b.n	8004522 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004514:	231a      	movs	r3, #26
 8004516:	2220      	movs	r2, #32
 8004518:	189b      	adds	r3, r3, r2
 800451a:	19db      	adds	r3, r3, r7
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
        break;
 8004520:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004524:	2b00      	cmp	r3, #0
 8004526:	d02a      	beq.n	800457e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452c:	4b1f      	ldr	r3, [pc, #124]	; (80045ac <UART_SetConfig+0x574>)
 800452e:	0052      	lsls	r2, r2, #1
 8004530:	5ad3      	ldrh	r3, [r2, r3]
 8004532:	0019      	movs	r1, r3
 8004534:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004536:	f7fb fde7 	bl	8000108 <__udivsi3>
 800453a:	0003      	movs	r3, r0
 800453c:	001a      	movs	r2, r3
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	18d2      	adds	r2, r2, r3
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	0019      	movs	r1, r3
 800454c:	0010      	movs	r0, r2
 800454e:	f7fb fddb 	bl	8000108 <__udivsi3>
 8004552:	0003      	movs	r3, r0
 8004554:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	2b0f      	cmp	r3, #15
 800455a:	d90a      	bls.n	8004572 <UART_SetConfig+0x53a>
 800455c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	025b      	lsls	r3, r3, #9
 8004562:	429a      	cmp	r2, r3
 8004564:	d205      	bcs.n	8004572 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	b29a      	uxth	r2, r3
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	e005      	b.n	800457e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004572:	231a      	movs	r3, #26
 8004574:	2220      	movs	r2, #32
 8004576:	189b      	adds	r3, r3, r2
 8004578:	19db      	adds	r3, r3, r7
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	226a      	movs	r2, #106	; 0x6a
 8004582:	2101      	movs	r1, #1
 8004584:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	2268      	movs	r2, #104	; 0x68
 800458a:	2101      	movs	r1, #1
 800458c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	2200      	movs	r2, #0
 8004592:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	2200      	movs	r2, #0
 8004598:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800459a:	231a      	movs	r3, #26
 800459c:	2220      	movs	r2, #32
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	19db      	adds	r3, r3, r7
 80045a2:	781b      	ldrb	r3, [r3, #0]
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b010      	add	sp, #64	; 0x40
 80045aa:	bdb0      	pop	{r4, r5, r7, pc}
 80045ac:	08005298 	.word	0x08005298
 80045b0:	00f42400 	.word	0x00f42400

080045b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	2201      	movs	r2, #1
 80045c2:	4013      	ands	r3, r2
 80045c4:	d00b      	beq.n	80045de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a4a      	ldr	r2, [pc, #296]	; (80046f8 <UART_AdvFeatureConfig+0x144>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	0019      	movs	r1, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	2202      	movs	r2, #2
 80045e4:	4013      	ands	r3, r2
 80045e6:	d00b      	beq.n	8004600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4a43      	ldr	r2, [pc, #268]	; (80046fc <UART_AdvFeatureConfig+0x148>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	2204      	movs	r2, #4
 8004606:	4013      	ands	r3, r2
 8004608:	d00b      	beq.n	8004622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a3b      	ldr	r2, [pc, #236]	; (8004700 <UART_AdvFeatureConfig+0x14c>)
 8004612:	4013      	ands	r3, r2
 8004614:	0019      	movs	r1, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	2208      	movs	r2, #8
 8004628:	4013      	ands	r3, r2
 800462a:	d00b      	beq.n	8004644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4a34      	ldr	r2, [pc, #208]	; (8004704 <UART_AdvFeatureConfig+0x150>)
 8004634:	4013      	ands	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	2210      	movs	r2, #16
 800464a:	4013      	ands	r3, r2
 800464c:	d00b      	beq.n	8004666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <UART_AdvFeatureConfig+0x154>)
 8004656:	4013      	ands	r3, r2
 8004658:	0019      	movs	r1, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	d00b      	beq.n	8004688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <UART_AdvFeatureConfig+0x158>)
 8004678:	4013      	ands	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	2240      	movs	r2, #64	; 0x40
 800468e:	4013      	ands	r3, r2
 8004690:	d01d      	beq.n	80046ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <UART_AdvFeatureConfig+0x15c>)
 800469a:	4013      	ands	r3, r2
 800469c:	0019      	movs	r1, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	035b      	lsls	r3, r3, #13
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d10b      	bne.n	80046ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a15      	ldr	r2, [pc, #84]	; (8004714 <UART_AdvFeatureConfig+0x160>)
 80046be:	4013      	ands	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	2280      	movs	r2, #128	; 0x80
 80046d4:	4013      	ands	r3, r2
 80046d6:	d00b      	beq.n	80046f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <UART_AdvFeatureConfig+0x164>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	0019      	movs	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b002      	add	sp, #8
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	fffdffff 	.word	0xfffdffff
 80046fc:	fffeffff 	.word	0xfffeffff
 8004700:	fffbffff 	.word	0xfffbffff
 8004704:	ffff7fff 	.word	0xffff7fff
 8004708:	ffffefff 	.word	0xffffefff
 800470c:	ffffdfff 	.word	0xffffdfff
 8004710:	ffefffff 	.word	0xffefffff
 8004714:	ff9fffff 	.word	0xff9fffff
 8004718:	fff7ffff 	.word	0xfff7ffff

0800471c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af02      	add	r7, sp, #8
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2290      	movs	r2, #144	; 0x90
 8004728:	2100      	movs	r1, #0
 800472a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800472c:	f7fd fb24 	bl	8001d78 <HAL_GetTick>
 8004730:	0003      	movs	r3, r0
 8004732:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2208      	movs	r2, #8
 800473c:	4013      	ands	r3, r2
 800473e:	2b08      	cmp	r3, #8
 8004740:	d10c      	bne.n	800475c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2280      	movs	r2, #128	; 0x80
 8004746:	0391      	lsls	r1, r2, #14
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <UART_CheckIdleState+0x98>)
 800474c:	9200      	str	r2, [sp, #0]
 800474e:	2200      	movs	r2, #0
 8004750:	f000 f832 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d001      	beq.n	800475c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e026      	b.n	80047aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2204      	movs	r2, #4
 8004764:	4013      	ands	r3, r2
 8004766:	2b04      	cmp	r3, #4
 8004768:	d10c      	bne.n	8004784 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2280      	movs	r2, #128	; 0x80
 800476e:	03d1      	lsls	r1, r2, #15
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <UART_CheckIdleState+0x98>)
 8004774:	9200      	str	r2, [sp, #0]
 8004776:	2200      	movs	r2, #0
 8004778:	f000 f81e 	bl	80047b8 <UART_WaitOnFlagUntilTimeout>
 800477c:	1e03      	subs	r3, r0, #0
 800477e:	d001      	beq.n	8004784 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e012      	b.n	80047aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2288      	movs	r2, #136	; 0x88
 8004788:	2120      	movs	r1, #32
 800478a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	228c      	movs	r2, #140	; 0x8c
 8004790:	2120      	movs	r1, #32
 8004792:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2284      	movs	r2, #132	; 0x84
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	0018      	movs	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b004      	add	sp, #16
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	01ffffff 	.word	0x01ffffff

080047b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b094      	sub	sp, #80	; 0x50
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c8:	e0a7      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047cc:	3301      	adds	r3, #1
 80047ce:	d100      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80047d0:	e0a3      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d2:	f7fd fad1 	bl	8001d78 <HAL_GetTick>
 80047d6:	0002      	movs	r2, r0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d13f      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047f0:	647b      	str	r3, [r7, #68]	; 0x44
 80047f2:	2301      	movs	r3, #1
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	f383 8810 	msr	PRIMASK, r3
}
 80047fc:	46c0      	nop			; (mov r8, r8)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	494e      	ldr	r1, [pc, #312]	; (8004944 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800480a:	400a      	ands	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481a:	f3ef 8310 	mrs	r3, PRIMASK
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	643b      	str	r3, [r7, #64]	; 0x40
 8004824:	2301      	movs	r3, #1
 8004826:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	f383 8810 	msr	PRIMASK, r3
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2101      	movs	r1, #1
 800483c:	438a      	bics	r2, r1
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004846:	f383 8810 	msr	PRIMASK, r3
}
 800484a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2288      	movs	r2, #136	; 0x88
 8004850:	2120      	movs	r1, #32
 8004852:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	228c      	movs	r2, #140	; 0x8c
 8004858:	2120      	movs	r1, #32
 800485a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2284      	movs	r2, #132	; 0x84
 8004860:	2100      	movs	r1, #0
 8004862:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e069      	b.n	800493c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2204      	movs	r2, #4
 8004870:	4013      	ands	r3, r2
 8004872:	d052      	beq.n	800491a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	401a      	ands	r2, r3
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	429a      	cmp	r2, r3
 8004886:	d148      	bne.n	800491a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	0112      	lsls	r2, r2, #4
 8004890:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004892:	f3ef 8310 	mrs	r3, PRIMASK
 8004896:	613b      	str	r3, [r7, #16]
  return(result);
 8004898:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800489a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f383 8810 	msr	PRIMASK, r3
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4924      	ldr	r1, [pc, #144]	; (8004944 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f383 8810 	msr	PRIMASK, r3
}
 80048c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c4:	f3ef 8310 	mrs	r3, PRIMASK
 80048c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80048ca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ce:	2301      	movs	r3, #1
 80048d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	438a      	bics	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	f383 8810 	msr	PRIMASK, r3
}
 80048f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2288      	movs	r2, #136	; 0x88
 80048fa:	2120      	movs	r1, #32
 80048fc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	228c      	movs	r2, #140	; 0x8c
 8004902:	2120      	movs	r1, #32
 8004904:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2290      	movs	r2, #144	; 0x90
 800490a:	2120      	movs	r1, #32
 800490c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2284      	movs	r2, #132	; 0x84
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e010      	b.n	800493c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	4013      	ands	r3, r2
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	425a      	negs	r2, r3
 800492a:	4153      	adcs	r3, r2
 800492c:	b2db      	uxtb	r3, r3
 800492e:	001a      	movs	r2, r3
 8004930:	1dfb      	adds	r3, r7, #7
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d100      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0x182>
 8004938:	e747      	b.n	80047ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b014      	add	sp, #80	; 0x50
 8004942:	bd80      	pop	{r7, pc}
 8004944:	fffffe5f 	.word	0xfffffe5f

08004948 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2284      	movs	r2, #132	; 0x84
 8004954:	5c9b      	ldrb	r3, [r3, r2]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_UARTEx_DisableFifoMode+0x16>
 800495a:	2302      	movs	r3, #2
 800495c:	e027      	b.n	80049ae <HAL_UARTEx_DisableFifoMode+0x66>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2284      	movs	r2, #132	; 0x84
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2288      	movs	r2, #136	; 0x88
 800496a:	2124      	movs	r1, #36	; 0x24
 800496c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	438a      	bics	r2, r1
 8004984:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4a0b      	ldr	r2, [pc, #44]	; (80049b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800498a:	4013      	ands	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2288      	movs	r2, #136	; 0x88
 80049a0:	2120      	movs	r1, #32
 80049a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2284      	movs	r2, #132	; 0x84
 80049a8:	2100      	movs	r1, #0
 80049aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b004      	add	sp, #16
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	dfffffff 	.word	0xdfffffff

080049bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2284      	movs	r2, #132	; 0x84
 80049ca:	5c9b      	ldrb	r3, [r3, r2]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e02e      	b.n	8004a32 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2284      	movs	r2, #132	; 0x84
 80049d8:	2101      	movs	r1, #1
 80049da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2288      	movs	r2, #136	; 0x88
 80049e0:	2124      	movs	r1, #36	; 0x24
 80049e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2101      	movs	r1, #1
 80049f8:	438a      	bics	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	08d9      	lsrs	r1, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 f854 	bl	8004ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2288      	movs	r2, #136	; 0x88
 8004a24:	2120      	movs	r1, #32
 8004a26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2284      	movs	r2, #132	; 0x84
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b004      	add	sp, #16
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2284      	movs	r2, #132	; 0x84
 8004a4a:	5c9b      	ldrb	r3, [r3, r2]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e02f      	b.n	8004ab4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2284      	movs	r2, #132	; 0x84
 8004a58:	2101      	movs	r1, #1
 8004a5a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2288      	movs	r2, #136	; 0x88
 8004a60:	2124      	movs	r1, #36	; 0x24
 8004a62:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2101      	movs	r1, #1
 8004a78:	438a      	bics	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	0019      	movs	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f000 f813 	bl	8004ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2288      	movs	r2, #136	; 0x88
 8004aa6:	2120      	movs	r1, #32
 8004aa8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2284      	movs	r2, #132	; 0x84
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b004      	add	sp, #16
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	f1ffffff 	.word	0xf1ffffff

08004ac0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d108      	bne.n	8004ae2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	226a      	movs	r2, #106	; 0x6a
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2268      	movs	r2, #104	; 0x68
 8004adc:	2101      	movs	r1, #1
 8004ade:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ae0:	e043      	b.n	8004b6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ae2:	260f      	movs	r6, #15
 8004ae4:	19bb      	adds	r3, r7, r6
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aea:	200e      	movs	r0, #14
 8004aec:	183b      	adds	r3, r7, r0
 8004aee:	2208      	movs	r2, #8
 8004af0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	0e5b      	lsrs	r3, r3, #25
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	240d      	movs	r4, #13
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	2107      	movs	r1, #7
 8004b02:	400a      	ands	r2, r1
 8004b04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	0f5b      	lsrs	r3, r3, #29
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	250c      	movs	r5, #12
 8004b12:	197b      	adds	r3, r7, r5
 8004b14:	2107      	movs	r1, #7
 8004b16:	400a      	ands	r2, r1
 8004b18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b1a:	183b      	adds	r3, r7, r0
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	197a      	adds	r2, r7, r5
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	4914      	ldr	r1, [pc, #80]	; (8004b74 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b24:	5c8a      	ldrb	r2, [r1, r2]
 8004b26:	435a      	muls	r2, r3
 8004b28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b2a:	197b      	adds	r3, r7, r5
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <UARTEx_SetNbDataToProcess+0xb8>)
 8004b30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b32:	0019      	movs	r1, r3
 8004b34:	f7fb fb72 	bl	800021c <__divsi3>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	b299      	uxth	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	226a      	movs	r2, #106	; 0x6a
 8004b40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b42:	19bb      	adds	r3, r7, r6
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	193a      	adds	r2, r7, r4
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	490a      	ldr	r1, [pc, #40]	; (8004b74 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b4c:	5c8a      	ldrb	r2, [r1, r2]
 8004b4e:	435a      	muls	r2, r3
 8004b50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <UARTEx_SetNbDataToProcess+0xb8>)
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	f7fb fb5e 	bl	800021c <__divsi3>
 8004b60:	0003      	movs	r3, r0
 8004b62:	b299      	uxth	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2268      	movs	r2, #104	; 0x68
 8004b68:	5299      	strh	r1, [r3, r2]
}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b005      	add	sp, #20
 8004b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	080052b0 	.word	0x080052b0
 8004b78:	080052b8 	.word	0x080052b8

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	2600      	movs	r6, #0
 8004b80:	4d0c      	ldr	r5, [pc, #48]	; (8004bb4 <__libc_init_array+0x38>)
 8004b82:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	f000 f821 	bl	8004bd4 <_init>
 8004b92:	4d0a      	ldr	r5, [pc, #40]	; (8004bbc <__libc_init_array+0x40>)
 8004b94:	4c0a      	ldr	r4, [pc, #40]	; (8004bc0 <__libc_init_array+0x44>)
 8004b96:	1b64      	subs	r4, r4, r5
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	00b3      	lsls	r3, r6, #2
 8004ba2:	58eb      	ldr	r3, [r5, r3]
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	00b3      	lsls	r3, r6, #2
 8004bac:	58eb      	ldr	r3, [r5, r3]
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	080052c8 	.word	0x080052c8
 8004bb8:	080052c8 	.word	0x080052c8
 8004bbc:	080052c8 	.word	0x080052c8
 8004bc0:	080052cc 	.word	0x080052cc

08004bc4 <memset>:
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	1882      	adds	r2, r0, r2
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d100      	bne.n	8004bce <memset+0xa>
 8004bcc:	4770      	bx	lr
 8004bce:	7019      	strb	r1, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	e7f9      	b.n	8004bc8 <memset+0x4>

08004bd4 <_init>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr

08004be0 <_fini>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr
 8004bec:	0000      	movs	r0, r0
	...

08004bf0 <__FLASH_Program_Fast_veneer>:
 8004bf0:	b401      	push	{r0}
 8004bf2:	4802      	ldr	r0, [pc, #8]	; (8004bfc <__FLASH_Program_Fast_veneer+0xc>)
 8004bf4:	4684      	mov	ip, r0
 8004bf6:	bc01      	pop	{r0}
 8004bf8:	4760      	bx	ip
 8004bfa:	bf00      	nop
 8004bfc:	2000000d 	.word	0x2000000d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000000c:	b580      	push	{r7, lr}
2000000e:	b088      	sub	sp, #32
20000010:	af00      	add	r7, sp, #0
20000012:	6078      	str	r0, [r7, #4]
20000014:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000016:	231f      	movs	r3, #31
20000018:	18fb      	adds	r3, r7, r3
2000001a:	2200      	movs	r2, #0
2000001c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000022:	683b      	ldr	r3, [r7, #0]
20000024:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000026:	4b1a      	ldr	r3, [pc, #104]	; (20000090 <FLASH_Program_Fast+0x84>)
20000028:	695a      	ldr	r2, [r3, #20]
2000002a:	4b19      	ldr	r3, [pc, #100]	; (20000090 <FLASH_Program_Fast+0x84>)
2000002c:	2180      	movs	r1, #128	; 0x80
2000002e:	02c9      	lsls	r1, r1, #11
20000030:	430a      	orrs	r2, r1
20000032:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000034:	f3ef 8310 	mrs	r3, PRIMASK
20000038:	60fb      	str	r3, [r7, #12]
  return(result);
2000003a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000003c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000003e:	b672      	cpsid	i
}
20000040:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000042:	e00f      	b.n	20000064 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000044:	697a      	ldr	r2, [r7, #20]
20000046:	69bb      	ldr	r3, [r7, #24]
20000048:	6812      	ldr	r2, [r2, #0]
2000004a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000004c:	697b      	ldr	r3, [r7, #20]
2000004e:	3304      	adds	r3, #4
20000050:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000052:	69bb      	ldr	r3, [r7, #24]
20000054:	3304      	adds	r3, #4
20000056:	61bb      	str	r3, [r7, #24]
    index++;
20000058:	211f      	movs	r1, #31
2000005a:	187b      	adds	r3, r7, r1
2000005c:	781a      	ldrb	r2, [r3, #0]
2000005e:	187b      	adds	r3, r7, r1
20000060:	3201      	adds	r2, #1
20000062:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000064:	231f      	movs	r3, #31
20000066:	18fb      	adds	r3, r7, r3
20000068:	781b      	ldrb	r3, [r3, #0]
2000006a:	2b3f      	cmp	r3, #63	; 0x3f
2000006c:	d9ea      	bls.n	20000044 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	4b07      	ldr	r3, [pc, #28]	; (20000090 <FLASH_Program_Fast+0x84>)
20000072:	691a      	ldr	r2, [r3, #16]
20000074:	2380      	movs	r3, #128	; 0x80
20000076:	025b      	lsls	r3, r3, #9
20000078:	4013      	ands	r3, r2
2000007a:	d1f9      	bne.n	20000070 <FLASH_Program_Fast+0x64>
2000007c:	693b      	ldr	r3, [r7, #16]
2000007e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000080:	68bb      	ldr	r3, [r7, #8]
20000082:	f383 8810 	msr	PRIMASK, r3
}
20000086:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46bd      	mov	sp, r7
2000008c:	b008      	add	sp, #32
2000008e:	bd80      	pop	{r7, pc}
20000090:	40022000 	.word	0x40022000
